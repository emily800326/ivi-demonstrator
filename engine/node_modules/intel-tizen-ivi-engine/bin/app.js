var index = require("./routes/homeScreenService")
var userClass = require("./routes/userStatusService")
var carIndicatorService = require("./routes/carIndicatorService")
var audioService = require("./routes/audioService")
var tizenApplicationStubService = require("./routes/tizenApplicationStubService")
var packageRepositoryService = require("./routes/packageRepositoryService")
var themeEngineService = require("./routes/themeEngineService")
var eventSourceDispatcher = require("./eventSourceDispatcher")
var path = require("path")
var fs = require("fs")
var os = require("os")
var http = require("http")
var express = require('express');
var log4js = require('log4js');
var ejsMiddleware = require('ejs-middleware');
var app = express();
var rootDir = process.env.ROOT_DIR || path.dirname(__dirname);
var baseAppPath = process.env.APPLICATIONS_DIR || path.join(path.dirname(path.dirname(rootDir)), 'applications');
var port = process.env.ENGINE_PORT || 8088;
var baseThemePath = path.join(rootDir, 'themes');
var dataDir = process.env.DATA_DIR || path.join(rootDir, "data");
var launchWithPersistentConsole = process.env.LAUNCH_WITH_PERSISTENT_CONSOLE == 1 || false;
var doSilentInstall = process.env.SILENT_INSTALL == 1;
var isPasswordProtected = process.env.IS_PASSWORD_PROTECTED == 1;
var latestPackagesUrl = process.env.LATEST_PACKAGES_URL || "http://80.242.18.56/packages/latest";
var availablePackagesUrl = process.env.AVAILABLE_PACKAGES_URL || "http://80.242.18.56/packages/available";
var deviceName = process.env.DEVICE_NAME || os.hostname();
if(!fs.existsSync("logs")) {
    fs.mkdirSync("logs");
}
log4js.configure({
    appenders: [
        {
            type: 'console'
        }, 
        {
            type: 'file',
            filename: 'logs/engine.log',
            maxLogSize: 20480,
            backups: 3
        }, 
        {
            type: "file",
            filename: "logs/applications.log",
            maxLogSize: 20480,
            backups: 3,
            category: "Applications"
        }
    ]
});
var logger = log4js.getLogger('Server');
var applicationLogger = log4js.getLogger('Applications');
logger.info("Application starting at port: %d", port);
logger.info("Application root dir: %s", rootDir);
logger.info("Application data dir: %s", dataDir);
app.configure(function () {
    app.use(log4js.connectLogger(logger, {
        level: log4js.levels.INFO
    }));
    app.set('port', port);
    app.set('views', path.join(rootDir, "views"));
    app.set('view engine', 'ejs');
    app.use(express.favicon());
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    if(isPasswordProtected) {
        logger.info("Enabling password protection");
        app.use(express.basicAuth('intel', 'TiZ3N456!'));
    }
    app.use(app.router);
    var publicDir = path.join(rootDir, "public");
    app.use(require('stylus').middleware(publicDir));
    app.use(ejsMiddleware(path.join(publicDir, "api"), "js"));
    app.use(express.static(publicDir));
    if(!fs.existsSync(baseAppPath)) {
        fs.mkdirSync(baseAppPath);
    }
});
var eventDispatcher = new eventSourceDispatcher.EventSourceDispatcher();
eventDispatcher.attachApplication(app);
var carIndicator = new carIndicatorService.CarIndicatorService(eventDispatcher);
carIndicator.attachApplication(app);
new audioService.AudioService(eventDispatcher).attachApplication(app);
var packageRepository = new packageRepositoryService.PackageRepositoryService({
    baseApplicationPath: baseAppPath,
    baseThemePath: baseThemePath,
    baseDataPath: path.join(dataDir, "packageRepository"),
    doSilentInstall: doSilentInstall,
    latestPackagesUrl: latestPackagesUrl,
    availablePackagesUrl: availablePackagesUrl,
    deviceName: deviceName,
    engineVersion: JSON.parse(fs.readFileSync(path.join(rootDir, "package.json")).toString()).version
});
packageRepository.attachApplication(app);
new tizenApplicationStubService.TizenApplicationStubService(packageRepository, eventDispatcher, launchWithPersistentConsole).attachApplication(app);
var themeEngine = new themeEngineService.ThemeEngineService(packageRepository, eventDispatcher, baseThemePath);
themeEngine.attachApplication(app);
new userClass.UserStatusService(themeEngine, carIndicator, packageRepository).attachApplication(app);
var homepage = new index.HomeScreenService(packageRepository, launchWithPersistentConsole);
app.get('/', homepage.index.bind(homepage));
app.post('/log', function (req, res) {
    try  {
        var level = req.body.level;
        level = level == "log" ? "info" : level;
        var message = req.body.message;
        var referer = req.headers["referer"];
        switch(level) {
            case "info": {
                applicationLogger.info(referer, message);
                break;

            }
            case "debug": {
                applicationLogger.debug(referer, message);
                break;

            }
            case "warn": {
                applicationLogger.warn(referer, message);
                break;

            }
            case "error": {
                applicationLogger.error(referer, message);
                break;

            }
        }
    } catch (ex) {
        logger.error(ex);
    }
    res.json({
    });
});
app.configure('development', function () {
    app.use(express.errorHandler({
        dumpExceptions: true,
        showStack: true
    }));
});
var server = http.createServer(app);
server.listen(app.get('port'), function () {
    logger.info("Express server listening on port %d", app.get('port'));
});
app.get('/shutdown', function (aRequest, aResponse) {
    logger.info("Shutdown command arrived");
    aResponse.write("OK");
    aResponse.end('\n');
    server.close();
    process.exit();
});
