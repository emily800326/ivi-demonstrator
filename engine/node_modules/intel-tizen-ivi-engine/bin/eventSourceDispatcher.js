var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var util = require("util")

var log4js = require('log4js'), _EventEmitter = require("events").EventEmitter;
var EventSourceDispatcher = (function (_super) {
    __extends(EventSourceDispatcher, _super);
    function EventSourceDispatcher() {
        _super.call(this);
        this.firstTime = true;
        this.logger = log4js.getLogger("EventSourceDispatcher");
    }
    EventSourceDispatcher.prototype.attachApplication = function (aApplication) {
        aApplication.get('/ivi-events', this.getEvents.bind(this));
    };
    EventSourceDispatcher.prototype.getEvents = function (aRequest, aResponse) {
        var self = this;
        var referer = aRequest.headers["referer"];
        this.logger.info("EventSource stream requested by %s", referer);
        aResponse.header('Content-Type', 'text/event-stream');
        aResponse.header('Cache-Control', 'no-cache');
        aResponse.header('Connection', 'keep-alive');
        aResponse.connection.setTimeout(0);
        var responseFunction = function (aEventData) {
            self.logger.debug("Sending message from %s to %s: %j", aEventData.source, referer, aEventData.message);
            var payload = util.format("id: %d\n", new Date().toLocaleTimeString());
            payload += util.format("data: %j\n\n", aEventData);
            aResponse.write(payload);
        };
        this.on("send", responseFunction);
        if(this.firstTime) {
            responseFunction({
                source: "global",
                message: "initialized"
            });
            this.firstTime = false;
        }
        aRequest.connection.addListener('close', function () {
            self.logger.info("EventSource stream closed by client %s, closing response ...", referer);
            aResponse.end("\n");
            self.removeListener("send", responseFunction);
        });
    };
    return EventSourceDispatcher;
})(_EventEmitter);
exports.EventSourceDispatcher = EventSourceDispatcher;
