var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var util = require("util")


var EventSourceChannelResponse;
var log4js = require('log4js'), jsp = require("uglify-js").parser, pro = require("uglify-js").uglify, _EventEmitter = require("events").EventEmitter;
exports.AttachedServices = [];
var AbstractService = (function (_super) {
    __extends(AbstractService, _super);
    function AbstractService(serviceOptions) {
        _super.call(this);
        this.serviceOptions = serviceOptions;
        this.serviceOptions.endpointName = serviceOptions.endpointName || serviceOptions.name.toLowerCase();
        this.serviceOptions.description = serviceOptions.description || serviceOptions.name;
        this.serviceOptions.apiClassName = serviceOptions.apiClassName || serviceOptions.name;
        this.serviceOptions.indexView = serviceOptions.indexView || "apiConsole";
        this.serviceOptions.apiView = serviceOptions.apiView || "api";
        this.basePath = util.format("/%s", this.serviceOptions.endpointName);
        this.logger = log4js.getLogger(this.serviceOptions.name);
        this.logger.info("Starting up endpoint %j", this.serviceOptions);
        this.actions = [
            {
                type: "api",
                title: "Get API",
                endpoint: ".js",
                callback: this.getApi
            }, 
            {
                type: "api",
                title: "Get minified API",
                endpoint: ".min.js",
                callback: this.getMinifiedApi
            }
        ];
        exports.AttachedServices.push(this.serviceOptions);
    }
    AbstractService.prototype.sendStatus = function (aSource, aMessage) {
        if(!!this.serviceOptions.eventSourceDispatcher) {
            this.logger.info("Sending updated status: %j", aMessage);
            this.serviceOptions.eventSourceDispatcher.emit("send", {
                source: util.format("%s/%s", this.serviceOptions.apiClassName, aSource),
                message: aMessage
            });
        } else {
            this.logger.error("Service option eventSourceDispatcher was not provided, cannot send status %s: %j", aSource, aMessage);
        }
    };
    AbstractService.prototype.attachApplication = function (aApplication) {
        var self = this;
        this.applicationRoot = aApplication;
        aApplication.get(this.basePath, this.index.bind(self));
        this.actions.forEach(function (aAction) {
            var endpoint = self.basePath + aAction.endpoint;
            if(!!aAction.callback) {
                self.logger.debug("Binding action %s [%s]: %s", aAction.title, aAction.type, endpoint);
                if(aAction.type == "get" || aAction.type == "event" || aAction.type == "api" || aAction.type == "navigate") {
                    aApplication.get(endpoint, aAction.callback.bind(self));
                }
                if(aAction.type == "post") {
                    aApplication.post(endpoint, aAction.callback.bind(self));
                }
            } else {
                self.logger.warn("No callback method defined for action %s [%s]: %s", aAction.title, aAction.type, endpoint);
            }
        });
    };
    AbstractService.prototype.index = function (aRequest, aResponse) {
        aResponse.render(this.serviceOptions.indexView, {
            title: this.serviceOptions.description,
            actions: this.actions,
            basePath: this.basePath
        });
    };
    AbstractService.prototype._getApi = function (aRequest, aResponse, aCallback) {
        aResponse.header('Content-Type', 'text/javascript');
        aResponse.render(this.serviceOptions.apiView, {
            className: this.serviceOptions.apiClassName,
            actions: this.actions,
            basePath: this.basePath,
            port: this.applicationRoot.get("port")
        }, aCallback);
    };
    AbstractService.prototype.getMinifiedApi = function (aRequest, aResponse) {
        this._getApi(aRequest, aResponse, function (err, str) {
            if(err) {
                return aRequest.next(err);
            }
            var ast = jsp.parse(str);
            ast = pro.ast_mangle(ast);
            ast = pro.ast_squeeze(ast);
            var final_code = pro.gen_code(ast);
            aResponse.send(final_code);
        });
    };
    AbstractService.prototype.getApi = function (aRequest, aResponse) {
        this._getApi(aRequest, aResponse, function (err, str) {
            if(err) {
                return aRequest.next(err);
            }
            var ast = jsp.parse(str);
            var final_code = pro.gen_code(ast, {
                beautify: true
            });
            aResponse.send(final_code);
        });
    };
    return AbstractService;
})(_EventEmitter);
exports.AbstractService = AbstractService;
