var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var abstractService = require("./abstractService")


var CarIndicatorService = (function (_super) {
    __extends(CarIndicatorService, _super);
    function CarIndicatorService(eventSourceDispatcher) {
        _super.call(this, {
    name: "CarIndicator",
    description: "Car indicator",
    apiClassName: "CarIndicator",
    indexView: "carindicator",
    eventSourceDispatcher: eventSourceDispatcher
});
        this.status = {
            frontLeftwhell: "",
            frontRightwhell: "",
            rearLeftwhell: "",
            rearRightwhell: "",
            childLock: false,
            frontLights: false,
            rearLights: false,
            fan: false,
            batteryStatus: 58,
            fullBatteryRange: 350,
            outsideTemp: 74.2,
            insideTemp: 68.2,
            wheelAngle: 0,
            weather: 1,
            avgKW: 0.28,
            speed: 65,
            odoMeter: 75126,
            gear: "D"
        };
        this.randomizer = {
            enabled: false,
            timeout: 2000,
            intervalId: undefined
        };
    }
    CarIndicatorService.prototype.attachApplication = function (aApplication) {
        var self = this;
        this.actions.splice(this.actions.length, 0, {
            type: "event",
            title: "Indicator live status",
            apiMethod: "addStatusListener",
            message: "status"
        }, {
            type: "get",
            title: "Get status",
            apiMethod: "getStatus",
            endpoint: "/status",
            callback: this.getStatus
        }, {
            type: "post",
            title: "Set status",
            apiMethod: "setStatus",
            endpoint: "/status",
            callback: this.postStatus,
            parameters: [
                {
                    name: "indicator",
                    type: "text",
                    value: "fan"
                }, 
                {
                    name: "status",
                    type: "checkbox",
                    value: "true"
                }, 
                {
                    name: "text_status",
                    type: "text",
                    value: ""
                }
            ]
        }, {
            type: "post",
            title: "Set randomizer",
            apiMethod: "setRandomizeStatus",
            endpoint: "/randomizeStatus",
            callback: this.setRandomizeStatus,
            parameters: [
                {
                    name: "enabled",
                    type: "text",
                    value: "true"
                }, 
                {
                    name: "timeout",
                    type: "text",
                    value: "10000"
                }
            ]
        });
        _super.prototype.attachApplication.call(this, aApplication);
        this.on("changed", function (aStatus) {
            self.sendStatus("status", aStatus);
        });
    };
    CarIndicatorService.prototype.getStatus = function (aRequest, aResponse) {
        aResponse.json(this.status);
    };
    CarIndicatorService.prototype._setStatus = function (aStatusData) {
        this.status = aStatusData;
        this.emit('changed', this.status);
    };
    CarIndicatorService.prototype.postStatus = function (aRequest, aResponse) {
        var self = this;
        this.status[aRequest.body.indicator] = aRequest.body.status == "true";
        if(this.status[aRequest.body.text_status] !== "") {
            this.status[aRequest.body.indicator] = aRequest.body.text_status;
        } else {
            this.status[aRequest.body.indicator] = aRequest.body.status == "true";
        }
        this._setStatus(this.status);
        this.getStatus(aRequest, aResponse);
    };
    CarIndicatorService.prototype.setRandomizeStatus = function (aRequest, aResponse) {
        var self = this;
        this.randomizer.enabled = aRequest.body.enabled.toString() == "true";
        this.randomizer.timeout = aRequest.body.timeout;
        this.logger.info("this.randomizer.enabled: %s", this.randomizer.enabled);
        if(this.randomizer.intervalId) {
            clearInterval(this.randomizer.intervalId);
            this.randomizer.intervalId = undefined;
        }
        if(this.randomizer.enabled) {
            this.randomizer.intervalId = setInterval(function () {
                for(var attr in self.status) {
                    if(attr != "fullBatteryRange" && attr != "batteryStatus" && attr != "frontLeftwhell" && attr != "frontRightwhell" && attr != "rearLeftwhell" && attr != "rearRightwhell" && attr != "outsideTemp" && attr != "insideTemp" && attr != "weather" && attr != "avgKW" && attr != "speed" && attr != "wheelAngle" && attr != "randomizer") {
                        self.status[attr] = Math.random() > 0.5;
                    }
                    if(attr == "batteryStatus") {
                        if(self.status[attr] > 10) {
                            self.status[attr] = Math.round(self.status[attr] - (Math.random() * 10));
                        } else {
                            self.status[attr] = 100;
                        }
                    }
                    if(attr == "outsideTemp") {
                        self.status[attr] += 3 - Math.round(Math.random() * 5);
                        if(self.status[attr] > 130) {
                            self.status[attr] = 77;
                        } else {
                            if(self.status[attr] > 130) {
                                self.status[attr] = -58;
                            }
                        }
                    }
                    if(attr == "insideTemp") {
                        self.status[attr] += 3 - Math.round(Math.random() * 5);
                        if(self.status[attr] > 130) {
                            self.status[attr] = 77;
                        } else {
                            if(self.status[attr] > 130) {
                                self.status[attr] = -58;
                            }
                        }
                    }
                    if(attr == "weather") {
                        self.status[attr] = 1 + Math.round(2 * Math.random());
                        var randomNumber = Math.random();
                    }
                    if(attr == "wheelAngle") {
                        var randomNumber = Math.random() * 30;
                        var direction;
                        if(Math.random() > 0.5) {
                            direction = 1;
                        } else {
                            direction = -1;
                        }
                        self.status[attr] = (randomNumber * direction);
                        if(self.status[attr] > 30) {
                            self.status[attr] = 30;
                        } else {
                            if(self.status[attr] < (-30)) {
                                self.status[attr] = -30;
                            }
                        }
                    }
                    if(attr == "gear") {
                        var randomNumber = 1 + Math.floor(6 * Math.random());
                        self.status[attr] = randomNumber;
                        self.status[attr] = randomNumber == 4 ? "D" : self.status[attr];
                        self.status[attr] = randomNumber == 5 ? "R" : self.status[attr];
                        self.status[attr] = randomNumber == 6 ? "N" : self.status[attr];
                    }
                    if(attr == "speed") {
                        self.status[attr] = Math.floor(85 * Math.random());
                    }
                    if(attr == "odoMeter") {
                        self.status[attr] = 50000 + Math.floor(10000 * Math.random());
                    }
                }
                self.status["randomizer"] = true;
                self.emit('changed', self.status);
            }, this.randomizer.timeout);
        } else {
            self.status["randomizer"] = false;
            this.logger.info("this.randomizer.enabled: stop interval");
            clearInterval(this.randomizer.intervalId);
            self.emit('changed', self.status);
        }
        aResponse.json(this.randomizer);
    };
    return CarIndicatorService;
})(abstractService.AbstractService);
exports.CarIndicatorService = CarIndicatorService;
