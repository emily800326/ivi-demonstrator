var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var abstractService = require("./abstractService")


var AudioService = (function (_super) {
    __extends(AudioService, _super);
    function AudioService(eventSourceDispatcher) {
        _super.call(this, {
    name: "AudioService",
    description: "Audio Service",
    apiClassName: "AudioService",
    indexView: "audioService",
    eventSourceDispatcher: eventSourceDispatcher
});
        this.status = {
            repeat: false,
            shuffle: false,
            play: false,
            indexInPlayList: 1,
            position: 0,
            volume: 50
        };
    }
    AudioService.prototype.attachApplication = function (aApplication) {
        var self = this;
        this.actions.splice(this.actions.length, 0, {
            type: "event",
            title: "Indicator live status",
            apiMethod: "addStatusListener",
            message: "status"
        }, {
            type: "get",
            title: "Get status",
            apiMethod: "getStatus",
            endpoint: "/status",
            callback: this.getStatus
        }, {
            type: "post",
            title: "Set status",
            apiMethod: "setStatus",
            endpoint: "/status",
            callback: this.postStatus,
            parameters: [
                {
                    name: "indicator",
                    type: "text",
                    value: "repeat"
                }, 
                {
                    name: "value",
                    type: "text",
                    value: "false"
                }
            ]
        }, {
            type: "post",
            title: "Set status all",
            apiMethod: "setStatusAll",
            endpoint: "/statusAll",
            callback: this.postStatusAll,
            parameters: [
                {
                    name: "value",
                    type: "text",
                    value: JSON.stringify(this.status)
                }
            ]
        });
        _super.prototype.attachApplication.call(this, aApplication);
        this.on("changed", function (aStatus) {
            self.sendStatus("status", aStatus);
        });
    };
    AudioService.prototype.getStatus = function (aRequest, aResponse) {
        aResponse.json(this.status);
    };
    AudioService.prototype.postStatus = function (aRequest, aResponse) {
        this.logger.info("postStatus called");
        var self = this;
        if(this.status[aRequest.body.value] != "") {
            this.status[aRequest.body.indicator] = aRequest.body.value;
        }
        this.emit('changed', this.status);
        this.getStatus(aRequest, aResponse);
    };
    AudioService.prototype.postStatusAll = function (aRequest, aResponse) {
        this.logger.info("new status: %s", aRequest.body.value);
        var self = this;
        if((typeof aRequest.body.value).toLowerCase() === "string") {
            try  {
                this.status = JSON.parse(aRequest.body.value);
            } catch (error) {
                this.logger.info("Unable to parse status: %s", error.message);
            }
        } else {
            this.status = aRequest.body.value;
        }
        this.logger.info("this status: %s", JSON.stringify(this.status));
        this.emit('changed', this.status);
        this.getStatus(aRequest, aResponse);
    };
    return AudioService;
})(abstractService.AbstractService);
exports.AudioService = AudioService;
