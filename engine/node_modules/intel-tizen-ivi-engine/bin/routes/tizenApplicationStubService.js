var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var abstractService = require("./abstractService")



var TizenApplicationStubService = (function (_super) {
    __extends(TizenApplicationStubService, _super);
    function TizenApplicationStubService(packageRepository, eventSourceDispatcher, launchWithPersistentConsole) {
        _super.call(this, {
    name: "TizenApplicationStubService",
    description: "Tizen Application Stub",
    endpointName: "tizenApplication",
    apiClassName: "application",
    apiView: "fakeTizenApplicationApi",
    eventSourceDispatcher: eventSourceDispatcher
});
        this.packageRepository = packageRepository;
        this.eventSourceDispatcher = eventSourceDispatcher;
        this.launchWithPersistentConsole = launchWithPersistentConsole;
    }
    TizenApplicationStubService.prototype.attachApplication = function (aApplication) {
        var self = this;
        this.actions.splice(this.actions.length, 0, {
            type: "navigate",
            title: "Launch application",
            apiMethod: "launch",
            endpoint: "/launch",
            callback: this.launch,
            parameters: [
                {
                    name: "id",
                    type: "text",
                    value: ""
                }
            ]
        }, {
            type: "navigate",
            title: "Hide application",
            apiMethod: "hide",
            endpoint: "/hide",
            callback: this.hide,
            parameters: []
        }, {
            type: "navigate",
            title: "Exit application",
            apiMethod: "exit",
            endpoint: "/exit",
            callback: this.exit,
            parameters: []
        }, {
            type: "get",
            title: "Get installed application info",
            endpoint: "/getAppsInfo",
            apiMethod: "getAppsInfo",
            callback: this.get
        }, {
            type: "event",
            title: "AddApplicationInstalledListener",
            apiMethod: "__addApplicationInstalledListener",
            message: "listener"
        });
        this.packageRepository.on("changed", function (aArgs) {
            try  {
                if(aArgs.type === "installedApplication") {
                    self.logger.info("Detected application change: %j", aArgs);
                    self.packageRepository.getInstalledApps().forEach(function (aItem, aIndex) {
                        if(aItem.__applicationDirectory == aArgs.application) {
                            self.logger.info("New application installed: %j", aItem);
                            self.emit("installed", aItem);
                        }
                    });
                }
            } catch (ex) {
                self.logger.error(ex);
            }
        });
        this.on("installed", function (aAppInfo) {
            self.sendStatus("listener", aAppInfo);
        });
        _super.prototype.attachApplication.call(this, aApplication);
    };
    TizenApplicationStubService.prototype.get = function (aRequest, aResponse) {
        this.logger.info("Updating list of applications");
        var applications = this.packageRepository.getInstalledApps();
        applications.forEach(function (aApp) {
            aApp.iconPath = "../" + aApp.__applicationDirectory + "/" + aApp.iconPath;
        });
        aResponse.json(applications);
    };
    TizenApplicationStubService.prototype.launch = function (aRequest, aResponse) {
        var applicationId = aRequest.query.id;
        this.logger.info("Launching app %s", applicationId);
        var apps = this.packageRepository.getInstalledApps();
        var redirectUrl;
        for(var i in apps) {
            if(apps[i].id === applicationId) {
                redirectUrl = "../../application/" + apps[i].__applicationDirectory + "/index.html";
                redirectUrl += this.launchWithPersistentConsole ? "?persistentConsole" : "";
                this.logger.info("redirecting to " + redirectUrl);
                break;
            }
        }
        this.logger.info("Redirecting to %s", apps[i].id);
        aResponse.redirect(redirectUrl);
    };
    TizenApplicationStubService.prototype.hide = function (aRequest, aResponse) {
        this.logger.info("Hiding app");
        var apps = this.packageRepository.getInstalledApps();
        var redirectUrl = "../../application/com.intel.tizen_homescreen/index.html";
        for(var i in apps) {
            if(apps[i].__applicationDirectory === "homescreen") {
                redirectUrl = "../../application/homescreen/index.html";
                break;
            }
        }
        this.logger.info("redirecting to " + redirectUrl);
        aResponse.redirect(redirectUrl);
    };
    TizenApplicationStubService.prototype.exit = function (aRequest, aResponse) {
        this.logger.info("Exiting app");
        var apps = this.packageRepository.getInstalledApps();
        var redirectUrl = "../../application/com.intel.tizen_homescreen/index.html";
        for(var i in apps) {
            if(apps[i].__applicationDirectory === "homescreen") {
                redirectUrl = "../../application/homescreen/index.html";
                break;
            }
        }
        this.logger.info("redirecting to " + redirectUrl);
        aResponse.redirect(redirectUrl);
    };
    return TizenApplicationStubService;
})(abstractService.AbstractService);
exports.TizenApplicationStubService = TizenApplicationStubService;
