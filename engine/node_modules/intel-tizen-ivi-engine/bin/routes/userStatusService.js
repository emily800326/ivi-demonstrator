var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var abstractService = require("./abstractService")





var UserStatusService = (function (_super) {
    __extends(UserStatusService, _super);
    function UserStatusService(themeEngine, carIndicator, packageRepository) {
        _super.call(this, {
    name: "UserStatus",
    endpointName: "user",
    description: "User management",
    apiClassName: "UserManagement"
});
        this.themeEngine = themeEngine;
        this.carIndicator = carIndicator;
        this.packageRepository = packageRepository;
        this.userDetails = [];
    }
    UserStatusService.prototype.attachApplication = function (aApplication) {
        this.actions.splice(this.actions.length, 0, {
            type: "get",
            title: "Login",
            apiMethod: "login",
            endpoint: "/login",
            callback: this.login
        }, {
            type: "get",
            title: "Get status",
            endpoint: "/get",
            callback: this.get
        });
        this.userDetails.push({
            id: 0,
            selected: true,
            settings: {
                theme: this.packageRepository.__getUserTheme().id,
                carStatus: this.carIndicator.status
            }
        });
        _super.prototype.attachApplication.call(this, aApplication);
    };
    UserStatusService.prototype._getSelectedUser = function () {
        var result;
        this.userDetails.forEach(function (userDetail) {
            if(userDetail.selected) {
                result = userDetail;
                return true;
            }
        });
        return result;
    };
    UserStatusService.prototype._selectUser = function (id) {
        var self = this;
        var currentUser = this._getSelectedUser();
        var currentThemeId = this.packageRepository.__getUserTheme().id;
        var currentCarStatus = this.carIndicator.status;
        this.userDetails.forEach(function (userDetail) {
            userDetail.selected = id == userDetail.id;
            if(userDetail.selected) {
                self.logger.info("Selecting user %d", userDetail.id);
                self.themeEngine._setUserTheme(userDetail.settings.theme);
                self.carIndicator._setStatus(userDetail.settings.carStatus);
                return true;
            }
        });
        currentUser.settings.theme = currentThemeId;
        currentUser.settings.carStatus = currentCarStatus;
    };
    UserStatusService.prototype.login = function (aRequest, aResponse) {
        var self = this;
        var userId = !!aRequest.cookies && aRequest.cookies.iviUser;
        if(userId) {
            var found = false;
            this.userDetails.forEach(function (userDetail) {
                if(userDetail.id == userId) {
                    found = true;
                    return true;
                }
            });
            if(found) {
                this._selectUser(userId);
            } else {
                userId = undefined;
            }
        }
        if(!userId) {
            userId = new Date().getTime();
            this.logger.info("Adding new user %d", userId);
            this.userDetails.push({
                id: userId,
                selected: true,
                settings: {
                    theme: this.packageRepository.__getUserTheme().id,
                    carStatus: this.carIndicator.status
                }
            });
        }
        aResponse.cookie('iviUser', userId, {
            expires: new Date(new Date().getTime() + 1000 * 60 * 60 * 24 * 30 * 24),
            httpOnly: true
        });
        aResponse.render("userLogin", {
        });
    };
    UserStatusService.prototype.get = function (aRequest, aResponse) {
        aResponse.json(this.userDetails);
    };
    return UserStatusService;
})(abstractService.AbstractService);
exports.UserStatusService = UserStatusService;
