var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var abstractService = require("./abstractService")

var express = require("express")
var path = require("path")

var util = require("util")


var request = require('request');
var ThemeEngineService = (function (_super) {
    __extends(ThemeEngineService, _super);
    function ThemeEngineService(packageRepository, eventSourceDispatcher, themesPath) {
        if (typeof themesPath === "undefined") { themesPath = __dirname; }
        _super.call(this, {
    name: "ThemeEngine",
    description: "Theme engine",
    apiClassName: "ThemeEngine",
    indexView: "themeEngine",
    eventSourceDispatcher: eventSourceDispatcher
});
        this.packageRepository = packageRepository;
        this.themesPath = themesPath;
        this.logger.info("Themes path: %s", this.themesPath);
    }
    ThemeEngineService.prototype.attachApplication = function (aApplication) {
        var self = this;
        this.actions.splice(this.actions.length, 0, {
            type: "event",
            title: "Theme live status",
            message: "status",
            apiMethod: "addStatusListener"
        }, {
            type: "get",
            title: "Get user themes",
            apiMethod: "getUserThemes",
            endpoint: "/userThemes",
            callback: this.getUserThemes
        }, {
            type: "get",
            title: "Get icon",
            apiMethod: "getIcon",
            endpoint: "/icon",
            callback: this.getIcon,
            parameters: [
                {
                    name: "id",
                    type: "text",
                    value: this.packageRepository.userThemes[0].id
                }
            ]
        }, {
            type: "post",
            title: "Set user theme",
            apiMethod: "setUserTheme",
            endpoint: "/userTheme",
            callback: this.setUserTheme,
            parameters: [
                {
                    name: "id",
                    type: "select",
                    values: this.packageRepository.userThemes,
                    value: this.packageRepository.userThemes[0].id
                }
            ]
        }, {
            type: "post",
            title: "Set car theme",
            endpoint: "/carTheme",
            callback: this.setCarTheme,
            parameters: [
                {
                    name: "id",
                    type: "select",
                    values: this.packageRepository.carThemes,
                    value: this.packageRepository.carThemes[0].id
                }
            ]
        });
        _super.prototype.attachApplication.call(this, aApplication);
        aApplication.use('/css/car', function (req, res) {
            return self.carThemeHandler(req, res);
        });
        aApplication.use('/css/user', function (req, res) {
            return self.userThemeHandler(req, res);
        });
        var setThemeDirectoriesFunction = function () {
            for(var themeIndex in self.packageRepository.carThemes) {
                var carTheme = self.packageRepository.carThemes[themeIndex];
                if(carTheme.selected) {
                    var carThemePath = path.join(self.themesPath, carTheme.id.replace("http://", ""));
                    self.logger.info("Binding car theme to directory '%s'", carThemePath);
                    self.carThemeHandler = express.static(carThemePath);
                }
            }
            for(var themeIndex in self.packageRepository.userThemes) {
                var userTheme = self.packageRepository.userThemes[themeIndex];
                if(userTheme.selected) {
                    var userThemePath = path.join(self.themesPath, userTheme.id.replace("http://", ""));
                    self.logger.info("Binding user theme to directory '%s'", userThemePath);
                    self.userThemeHandler = express.static(userThemePath);
                }
            }
        };
        this.on("changed", function () {
            setThemeDirectoriesFunction();
            self.sendStatus("status");
        });
        setThemeDirectoriesFunction();
        this.packageRepository.on("changed", function (aArgs) {
            try  {
                if(aArgs.type === "installedTheme") {
                    var selectedCarTheme = self.packageRepository.__getCarTheme(), selectedUserTheme = self.packageRepository.__getUserTheme();
                    self.logger.info("Detected installation of theme %s", aArgs.theme);
                    self.packageRepository.__loadThemes();
                    if(aArgs.theme == selectedCarTheme.id || aArgs.theme == selectedUserTheme.id) {
                        self.logger.info("Currently selected theme was updated, forcing reload ...");
                        self.emit('changed');
                    }
                }
            } catch (ex) {
                self.logger.error(ex);
            }
        });
    };
    ThemeEngineService.prototype.getUserThemes = function (aRequest, aResponse) {
        aResponse.json(this.packageRepository.userThemes);
    };
    ThemeEngineService.prototype.getIcon = function (aRequest, aResponse) {
        var theme;
        this.packageRepository.userThemes.forEach(function (aItem) {
            if(aRequest.query.id == aItem.id) {
                theme = aItem;
                return true;
            }
        });
        if(!!theme) {
            var userThemePath = path.join(this.themesPath, theme.id.replace("http://", ""));
            aResponse.sendfile(path.join(userThemePath, theme.icon));
        } else {
            aResponse.json({
                error: util.format("Invalid theme id '%s'", aRequest.query.id)
            });
        }
    };
    ThemeEngineService.prototype._setUserTheme = function (aId) {
        this.packageRepository.userThemes.forEach(function (aItem) {
            aItem.selected = aItem.id === aId;
        });
        this.emit('changed');
    };
    ThemeEngineService.prototype.setUserTheme = function (aRequest, aResponse) {
        var themeId = aRequest.body.id;
        this.logger.info("Setting user theme to %s", themeId);
        this._setUserTheme(themeId);
        this.getUserThemes(aRequest, aResponse);
    };
    ThemeEngineService.prototype.setCarTheme = function (aRequest, aResponse) {
        var themeId = aRequest.body.id;
        this.logger.info("Setting car theme to %s", themeId);
        this.packageRepository.carThemes.forEach(function (aItem) {
            aItem.selected = aItem.id === themeId;
        });
        this.emit('changed');
        aResponse.json({
            status: "OK"
        });
    };
    return ThemeEngineService;
})(abstractService.AbstractService);
exports.ThemeEngineService = ThemeEngineService;
