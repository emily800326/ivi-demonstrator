/**
 * @namespace com.intel.tizen.coulomb.2012
 **/
(function ($) {
    /**
     * Provides functions for Carousel JQuery Plugin panel.
     * @class Carousel
     * @static
     **/
    var Carousel = {
            /**
             * Holds value of carousel width.
             * @property width
             * @type int
             * @default 12000
             **/
            width: 12000,
            /**
             * Holds count of elements.
             * @property elementCount
             * @type int
             * @default 1
             **/
            elementCount: 1,
            /**
             * Holds value of element width.
             * @property elementWidth
             * @type int
             * @default 260
             **/
            elementWidth: 260,
            /**
             * Holds value of scrolling setep.
             * @property steep
             * @type int
             * @default 0
             **/
            steep: 0,
            /**
             * Holds value of minimal position of carousel object.
             * @property minPosition
             * @type int
             * @default 0
             **/
            minPosition: 0,
            /**
             * Holds value of maximal position of carousel object.
             * @property maxPosition
             * @type int
             * @default 0
             **/
            maxPosition: 0,
            /**
             * Holds value of center position of carousel object.
             * @property centerPosition
             * @type int
             * @default 460
             **/
            centerPosition: 460,
            /**
             * Holds value of current position of carousel object.
             * @property centerPosition
             * @type int
             * @default 0
             **/
            currentPosition: 0,
            /**
             * Holds value of current element index of carousel object.
             * @property currentIndex
             * @type int
             * @default 1
             **/
            currentIndex: 1,
            /**
             * Holds value of move constant.
             * @property moveConstant
             * @type int
             * @default 30
             **/
            moveConstant: 30,
            /**
             * Used for touch blocking.
             * @property prevTouch
             * @type int
             * @default 0
             **/
            prevTouch: 0,
            /**
             * Holds carousel ID of document .
             * @property thisSelector
             * @type string
             * @default null
             **/
            thisSelector: null,
            /**
             * Provides initialization of carousel plugin.
             * @method setUp
             * @param model {Object} Holds values for initialization of plugin.
             **/
            setUp: function (model) {
                Carousel.elementCount = model.length;
                Carousel.width = Carousel.elementWidth * Carousel.elementCount;
                Carousel.minPosition = -(Carousel.width - (Carousel.elementWidth * 1.5));
                Carousel.maxPosition = Carousel.centerPosition;
                Carousel.steep = Carousel.elementWidth;
                Carousel.currentPosition = Carousel.elementWidth;
                Carousel.touchEnd();
            },
            /**
             * Provides fucionality to move left for carousel.
             * @method moveLeft
             * @param object {Object} Holds object for move left transformation.
             **/
            moveLeft: function (object) {
                if ((Carousel.currentPosition - Carousel.steep) > Carousel.minPosition) {
                    Carousel.currentPosition = Carousel.currentPosition - Carousel.steep;
                    object.style.webkitTransform = "translate(" + Carousel.currentPosition + "px,0px)";
                }
                Carousel.prevTouch = 0;
            },
            /**
             * Provides fucionality to move right for carousel.
             * @method moveRight
             * @param object {Object} Holds object for move right transformation.
             **/
            moveRight: function (object) {
                if ((Carousel.currentPosition + Carousel.steep) < Carousel.maxPosition) {
                    Carousel.currentPosition = Carousel.currentPosition + Carousel.steep;
                    object.style.webkitTransform = "translate(" + Carousel.currentPosition + "px,0px)";
                }
                Carousel.prevTouch = 0;
            },
            /**
             * Provides fucionality for handling touch move event.
             * @method touchMove
             * @param object {Object} Holds object for move transformation.
             **/
            touchMove: function (object) {
                var currTouch = window.event.clientX;
                if (Carousel.prevTouch != 0) {

                    Carousel.currentPosition = Carousel.currentPosition + (currTouch - Carousel.prevTouch);
                    if (Carousel.currentPosition < Carousel.maxPosition && Carousel.currentPosition > Carousel.minPosition) {
                        object.style.webkitTransition = "transition(5s)";
                        object.style.webkitTransform = "translate(" + Carousel.currentPosition + "px,0px)";
                    }
                }
                Carousel.prevTouch = window.event.clientX;
                Carousel.touchEnd(object);

            },
            /**
             * Provides fucionality for handling touch end event.
             * @method touchEnd
             * @param object {Object} Holds object for move transformation.
             **/
            touchEnd: function (object) {
                var cur_item_name = "#item_" + Carousel.currentIndex;
                $(cur_item_name).find(".carouselShadow").css('display', 'none');
                var current_item = Math.round((-(Carousel.currentPosition) + Carousel.centerPosition) / Carousel.elementWidth);
                if (current_item <= 1) {
                    current_item = 1;
                } else if (current_item >= Carousel.elementCount) {
                    current_item = Carousel.elementCount;
                }
                console.log(current_item);

                Carousel.currentIndex = current_item;

                cur_item_name = "#item_" + Carousel.currentIndex;
                var newSrc = $(cur_item_name).find(".carouselImage").attr('src');
                if (newSrc != "undefined") {
                    $(cur_item_name).find(".carouselShadow").css('display', 'block');
                    $("#currentlyPlayingPreview").attr('src', newSrc);
                }
                Carousel.prevTouch = window.event.clientX;

            },
            /**
             * Provides fucionality for handling touch event.
             * @method touchEnd
             * @param object {Object} Holds object for move transformation.
             **/
            touch: function (object) {
                if (window.event.clientX < Carousel.centerPosition) {
                    Carousel.moveRight(object);
                } else if (window.event.clientX > Carousel.centerPosition) {
                    Carousel.moveLeft(object);
                }
                Carousel.touchEnd(object);
            },
            /**
             * Provides fucionality for setting index of element in carousel.
             * @method setIndex
             * @param new_index {int} Holds value of new index.
             **/
            setIndex: function (new_index) {
                console.log(new_index);
                var cur_item_name = "#item_" + Carousel.currentIndex;
                $(cur_item_name).find(".carouselShadow").css('display', 'none');
                Carousel.currentPosition = (-(Carousel.elementWidth * (new_index - 1)) + Carousel.elementWidth) + moveConstant;
                var current_item = new_index;
                if (current_item <= 1) {
                    current_item = 1;
                } else if (current_item >= Carousel.elementCount) {
                    current_item = Carousel.elementCount;
                }
                console.log(current_item);

                Carousel.currentIndex = current_item;
                console.log(Carousel.currentPosition);

                cur_item_name = "#item_" + Carousel.currentIndex;
                $(cur_item_name).find(".carouselShadow").css('display', 'block');
                var newSrc = $(cur_item_name).find(".carouselImage").attr('src');
                console.log("new src " + newSrc);
                if (newSrc != "undefined") {
                    $(cur_item_name).find(".carouselShadow").css('display', 'block');
                    $(thisSelector).css('webkitTransform', 'translate(' + Carousel.currentPosition + 'px,0px)');
                }
            },
            /**
             * Returns selected element from carousel based on current index.
             * @method getSelectedElement
             * @return {object} Object of selected element.
             **/
            getSelectedElement: function () {
                return (Carousel.currentIndex);
            },
            /**
             * Provides funcionality of generating carousel context to document based on carousel model.
             * @method fill
             * @param model {object} Holds model of carousel.
             **/
            fill: function (model) {
                var i;
                for (i = 0; i < model.length; i++) {
                    model[i].index = 1 + i;
                }
                template.compile(model, "templates/carouselDelegate.html", "#carousel_wrap");
                Carousel.thisSelector = this;
                Carousel.setUp(model);
            }
        };
    /** 
     * jQuery extension method for class `com.intel.tizen.coulomb.2012.Carousel`
     * @param method {Object|jQuery selector} Identificator (name) of method or jQuery selector.
     * @method carousel
     * @for jQuery
     * @return Result of called method.
     */
    $.fn.carousel = function (method) {
        // Method calling logic
        if (Carousel[method]) {
            return Carousel[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return Carousel.init.apply(this, arguments);
        } else {
            $.error('Method ' +  method + ' does not exist on jQuery.audioAPI');
        }
    };

}(jQuery));
