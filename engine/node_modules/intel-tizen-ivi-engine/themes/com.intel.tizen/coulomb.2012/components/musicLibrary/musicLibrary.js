/**
 * @namespace com.intel.tizen.coulomb.2012
 **/

/**
 * Provides list of songs in playlist
 * @property musicLibraryModel
 * @for global
 * @static
 */
var musicLibraryModel = [{
    "album": "Handel - Symphony1",
    "artist": "Handel",
    "name": "Variations",
    "path": "../../music/George Frideric Handel - Symphony1/Goldberg_Variations_BWV_988_I.wav",
    "image": "../../music/George Frideric Handel - Symphony1/hendel01.jpg"
}, {
    "album": "Handel - Symphony1",
    "artist": "Handel",
    "name": "Minuet in G",
    "path": "../../music/George Frideric Handel - Symphony1/Minuet_in_G.wav",
    "image": "../../music/George Frideric Handel - Symphony1/hendel01.jpg"
}, {
    "album": "Handel - Symphony1",
    "artist": "Handel",
    "name": "Invention No 1",
    "path": "../../music/George Frideric Handel - Symphony1/Invention_No_1_in_C_Major.wav",
    "image": "../../music/George Frideric Handel - Symphony1/hendel01.jpg"
}, {
    "album": "Handel - Symphony2",
    "artist": "Handel",
    "name": "Partita No 1",
    "path": "../../music/George Frideric Handel - Symphony2/Partita_No_1.wav",
    "image": "../../music/George Frideric Handel - Symphony2/hendel02.jpg"
}, {
    "album": "Handel - Symphony2",
    "artist": "Handel",
    "name": "Partita No 2",
    "path": "../../music/George Frideric Handel - Symphony2/Partita_No_2.wav",
    "image": "../../music/George Frideric Handel - Symphony2/hendel02.jpg"
}, {
    "album": "Handel - Symphony2",
    "artist": "Handel",
    "name": "Partita No 3",
    "path": "../../music/George Frideric Handel - Symphony2/Partita_No_3.wav",
    "image": "../../music/George Frideric Handel - Symphony2/hendel02.jpg"
}, {
    "album": "Beethoven Partia",
    "artist": "Beethoven",
    "name": "Opus",
    "path": "../../music/Beethoven/Opus.wav",
    "image": "../../music/Beethoven/beethoven01.jpg"
}, {
    "album": "Beethoven Partia",
    "artist": "Beethoven",
    "name": "Flat",
    "path": "../../music/Beethoven/Flat.wav",
    "image": "../../music/Beethoven/beethoven01.jpg"
}, {
    "album": "Beethoven Partia",
    "artist": "Beethoven",
    "name": "Sarabande",
    "path": "../../music/Beethoven/Sarabande.wav",
    "image": "../../music/Beethoven/beethoven01.jpg"
}, {
    "album": "Mozart Variations",
    "artist": "Mozart",
    "name": "Symph 1",
    "path": "../../music/Mozart/Symph_1.wav",
    "image": "../../music/Mozart/mozart01.jpg"
}, {
    "album": "Mozart Variations",
    "artist": "Mozart",
    "name": "Symph 2",
    "path": "../../music/Mozart/Symph_2.wav",
    "image": "../../music/Mozart/mozart01.jpg"
}, {
    "album": "Mozart Variations",
    "artist": "Mozart",
    "name": "Symph 3",
    "path": "../../music/Mozart/Symph_3.wav",
    "image": "../../music/Mozart/mozart01.jpg"
}];
/**
 * Holds string "ALL ARTIST".
 * @property ALL_ARTISTS {String}
 * @for global
 * @static
 */
var ALL_ARTISTS = "ALL ARTISTS";
/**
 * Holds string "ALL_ALBUMS".
 * @for global
 * @property ALL_ALBUMS {String}
 */
var ALL_ALBUMS = "ALL_ALBUMS";

/**
 * Function which provides artist list.
 * @method getArtistsList
 * @for global
 * @return {Object} List of artists object.
 */
function getArtistsList() {
    var artistsList = [],
        artistsListObj = [],
        i;
    for (i = 0; i < musicLibraryModel.length; i++) {
        artistsList.push(musicLibraryModel[i].artist);
    }
    artistsList = unique(artistsList);
    for (i = 0; i < artistsList.length; i++) {
        artistsListObj.push({artist: artistsList[i]});
    }
    return artistsListObj;
}
/**
 * Class which provides albums list.
 * @method getAlbums
 * @for global
 * @param artist {String} Name of artist.
 * @return {Object} List of albums object.
 */
function getAlbums(artist) {
    var albumsListObj = [],
        isAlbumFlag = true,
        sourceArtist,
        j,
        i;
    for (j = 0; j < musicLibraryModel.length; j++) {
        if (artist == ALL_ARTISTS) {
            sourceArtist = ALL_ARTISTS;
        } else {
            sourceArtist = musicLibraryModel[j].artist;
        }
        if (artist == sourceArtist) {
            isAlbumFlag = true;
        } else {
            isAlbumFlag = false;
        }
        if (albumsListObj.length > 0) {
            for (i = 0; i < albumsListObj.length; i++) {
                if ((albumsListObj[i].album == musicLibraryModel[j].album) && (artist == sourceArtist)) {
                    isAlbumFlag = false;
                }
            }
        } else {
            if (artist != sourceArtist) {
                isAlbumFlag = false;
            }
        }
        if (isAlbumFlag) {
            albumsListObj.push({
                album: musicLibraryModel[j].album,
                image: musicLibraryModel[j].image,
                artist: musicLibraryModel[j].artist
            });
        }
    }
    return albumsListObj;
}
/**
 * Class which provides songs list.
 * @method getSongsOfArtist
 * @for global
 * @param artistName {String} Name of artist.
 * @return {Object} List of songs object.
 */
function getSongsOfArtist(artistName) {
    var songsList = [],
        songsListObj = [],
        i,
        j;
    for (i = 0; i < musicLibraryModel.length; i++) {
        if (musicLibraryModel[i].artist == artistName) {
            songsList.push(musicLibraryModel[i].name);
        }
    }
    for (i = 0; i < songsList.length; i++) {
        for (j = 0; j < musicLibraryModel.length; j++) {
            if (songsList[i] == musicLibraryModel[j].name) {
                songsListObj.push({
                    album: musicLibraryModel[j].album,
                    artist: musicLibraryModel[j].artist,
                    name: musicLibraryModel[j].name,
                    path: musicLibraryModel[j].path,
                    image: musicLibraryModel[j].image
                });
                break;
            }
        }
    }
    return songsListObj;
}
/**
 * Class which provides songs list.
 * @method getSongsOfAlbums
 * @for global
 * @param albumName {String} Name of album.
 * @return {Object} List of songs object.
 */
function getSongsOfAlbums(albumName) {
    var songsList = [],
        songsListObj = [],
        i,
        j;

    for (i = 0; i < musicLibraryModel.length; i++) {
        if (albumName != ALL_ALBUMS) {
            if (musicLibraryModel[i].album == albumName) {
                songsList.push(musicLibraryModel[i].name);
            }
        } else {
            songsList.push(musicLibraryModel[i].name);
        }
    }
    for (i = 0; i < songsList.length; i++) {
        for (j = 0; j < musicLibraryModel.length; j++) {
            if (songsList[i] == musicLibraryModel[j].name) {
                songsListObj.push({
                    album: musicLibraryModel[j].album,
                    artist: musicLibraryModel[j].artist,
                    name: musicLibraryModel[j].name,
                    path: musicLibraryModel[j].path,
                    image: musicLibraryModel[j].image
                });
                break;
            }
        }
    }
    return songsListObj;
}
/**
 * Class which provides songs list.
 * @method unique
 * @for global
 * @param origArr {Object[]} Array of music objects.
 * @return {Object[]} New array of music objects.
 */
var unique = function (origArr) {
    var newArr = [],
        origLen = origArr.length,
        found,
        x,
        y;
    for (x = 0; x < origLen; x++) {
        found = undefined;
        for (y = 0; y < newArr.length; y++) {
            if (origArr[x] === newArr[y]) {
                found = true;
                break;
            }
        }
        if (!found) {
            newArr.push(origArr[x]);
        }
    }
    return newArr;
};
