/**
 * @namespace com.intel.tizen.coulomb.2012
 **/

/**
 * Class which provides methods to operate with AUDIO data stored on device file system
 * @class MusicLibraryFileSystem
 * @static
 */
var MusicLibraryFileSystem = {
		/**
		 * Holds object for access to local media source.
		 * @property mediaSource {Object}
		 */
		mediaSource : tizen.mediacontent.getLocalMediaSource(),
		/** 
		 * Method gets artist list object.
		 * @method getArtistsList
		 * @return returns artistsListModel object containing all artists
		 */
		getArtistsList : function () {
			var artistsList = [];
			var artistsListModel = [];

			function onArtistsFoundSuccess(media) {
				var i;
				for (i = 0; i < media.length; i++) {
					artistsList.push({
						artist : media[i].artists[0]
					});
				}

				artistsListModel = MusicLibraryFileSystem.getUniqueObjectElements(artistsList);
				MusicLibraryFileSystem.printObject(artistsListModel);
				return artistsListModel;
			}

			var filter = new tizen.AttributeFilter("type", "EXACTLY", "AUDIO");
			var sortMode = new tizen.SortMode("artists", "ASC");
			this.mediaSource.findItems(onArtistsFoundSuccess, this.onError, null, filter, sortMode);
		},
		/** 
		 * Method gets albums list object.
		 * @method getAlbumsList
		 * @param artistName {String} Name of artist.
		 * @return returns albumsListModel object containing albums of certain artist, if artistName is not set returns all albums
		 */
		getAlbumsList : function (artistName) {
			var albumsList = [];
			var albumsListModel = [];

			function onAlbumsFoundSuccess(media) {
				var i;
				for (i = 0; i < media.length; i++) {
					albumsList.push({
						artist : media[i].artists[0],
						album : media[i].album,
						image : media[i].thumbnailURIs[0]
					});
				}

				albumsListModel = MusicLibraryFileSystem.getUniqueObjectElements(albumsList);
				MusicLibraryFileSystem.printObject(albumsListModel);
				return albumsListModel;
			}

			var audioFilter = new tizen.AttributeFilter("type", "EXACTLY", "AUDIO");
			var artistFilter = new tizen.AttributeFilter("artists", "EXACTLY", artistName);
			var compositeFilter = new tizen.CompositeFilter("INTERSECTION", [audioFilter, artistFilter]);
			var sortMode = new tizen.SortMode("album", "ASC");

			if (artistName != undefined) {
				this.mediaSource.findItems(onAlbumsFoundSuccess, this.onError, null, compositeFilter, sortMode);
			} else {
				this.mediaSource.findItems(onAlbumsFoundSuccess, this.onError, null, audioFilter, sortMode);
			}

		},
		/** 
		 * Method gets songs of artist list object.
		 * @method getSongsOfArtist
		 * @param artistName {String} Name of artist.
		 * @return returns songsListModel object containing songs of certain artist, if artistName is not set returns all songs
		 */
		getSongsOfArtist : function (artistName) {
			var songsList = [];
			var songsListModel = [];

			function onSongsFoundSuccess(media) {
				var i;
				for (i = 0; i < media.length; i++) {
					songsList.push({
						artist : media[i].artists[0],
						album : media[i].album,
						name : media[i].title,
						image : media[i].thumbnailURIs[0],
						path : media[i].itemURI,
						trackNumber : media[i].trackNumber
					});
				}

				songsListModel = songsList;
				MusicLibraryFileSystem.printObject(songsListModel);
				return songsListModel;
			}

			var audioFilter = new tizen.AttributeFilter("type", "EXACTLY", "AUDIO");
			var artistFilter = new tizen.AttributeFilter("artists", "EXACTLY", artistName);
			var compositeFilter = new tizen.CompositeFilter("INTERSECTION", [audioFilter, artistFilter]);
			var sortMode = new tizen.SortMode("title", "ASC");

			if (artistName != undefined) {
				this.mediaSource.findItems(onSongsFoundSuccess, this.onError, null, compositeFilter, sortMode);
			} else {
				this.mediaSource.findItems(onSongsFoundSuccess, this.onError, null, audioFilter, sortMode);
			}
		},
		/** 
		 * Method gets songs of album list object.
		 * @method getSongsOfAlbums
		 * @param albumName {String} Name of album.
		 * @return returns songsListModel object containing songs of certain album, if albumName is not set returns all songs
		 */
		getSongsOfAlbums: function (albumName) {
			var songsList = [];
			var songsListModel = [];

			function onSongsFoundSuccess(media) {
				var i;
				for (i = 0; i < media.length; i++) {
					songsList.push({
						artist : media[i].artists[0],
						album : media[i].album,
						name : media[i].title,
						image : media[i].thumbnailURIs[0],
						path : media[i].itemURI,
						trackNumber : media[i].trackNumber
					});

				}

				songsListModel = songsList;
				MusicLibraryFileSystem.printObject(songsListModel);
				return songsListModel;
			}

			var audioFilter = new tizen.AttributeFilter("type", "EXACTLY", "AUDIO");
			var albumFilter = new tizen.AttributeFilter("album", "EXACTLY", albumName);
			var compositeFilter = new tizen.CompositeFilter("INTERSECTION", [audioFilter, albumFilter]);
			var sortMode = new tizen.SortMode("title", "ASC");

			if (albumName != undefined) {
				this.mediaSource.findItems(onSongsFoundSuccess, this.onError, null, compositeFilter, sortMode);
			} else {
				this.mediaSource.findItems(onSongsFoundSuccess, this.onError, null, audioFilter, sortMode);
			}
		},
		/** 
		 * Method called on error for logging to console.
		 * @param response {String} Error message.
		 * @method onError
		 */
		onError : function (response) {
			console.log("The following error occurred: " + response.name);
		},
		/** 
		 * Method gets unique object elements.
		 * @param origArr {Object[]} Objects array.
		 * @method getUniqueObjectElements
		 * @return New objects array.
		 */
		getUniqueObjectElements : function (origArr) {
			var newArr = [];
			var arrayLength = origArr.length;
			var i;
			for (i = 0; i < arrayLength; i++) {
				if (origArr.length == 0) {
					break;
				}
				newArr.push(origArr[0]);
				var j;
				for (j = origArr.length - 1; j >= 0; j--) {
					if (this.objectEquals(origArr[j], newArr[i])) {
						origArr.splice(j, 1);
					}
				}
			}
			return newArr;
		},
		/** 
		 * Method for test if obj1 and obj2 are equal.
		 * @param obj1 {Object} Object.
		 * @param obj2 {Object} Object.
		 * @method objectEquals
		 * @return {Boolean} Test result.
		 */
		objectEquals: function (obj1, obj2) {
			function _equals(obj1, obj2) {
				return JSON.stringify(obj1) === JSON.stringify($.extend(true, {}, obj1, obj2));
			}
			return _equals(obj1, obj2) && _equals(obj2, obj1);
		},

		printObject : function (object) {
			console.log("printObject");
			var i;
			for (i = 0; i < object.length; i++) {
				console.log("element No[" + i + "]");
				var property;
				for (property in object[i]) {
					if (object[i].hasOwnProperty(property)) {
						console.log(property + " : " + '"' + object[i][property] + '"');
					}
				}
				console.log("\n");
			}
		}
	};
