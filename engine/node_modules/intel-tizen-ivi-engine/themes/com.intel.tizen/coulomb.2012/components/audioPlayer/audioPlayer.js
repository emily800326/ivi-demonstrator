/**
 * @namespace com.intel.tizen.coulomb.2012
 **/
(function ($) {
    /**
     * Represents HTML5 audio, that is utilizing Audio Service API to get/set status of currently playing song (tested with wav audio files).
     * Audio resources are passed to the player as an array of songs (model/playlist).
     * Audio player is extended by option to set buttons to control audio playback (play/pause, next, previous, shuffle, repeat), time progress bar, spectrum analyzer, info panel, volume control.
     * @class AudioPlayer
     * @constructor
     */
    var AudioPlayer = {
            thisObj: null,
            /** 
             * Array of song objects. Every song object is supposed to have album, artist, name, path and image properties.
             * @property model
             * @type {Array}
             * @default null
             */
            model: null,
            /** 
             * HTML audio DOM element.
             * @property audio
             * @type {Audio}
             * @default null
             */
            audio: null,
            /** 
             * Indicates if audio timeupdate event listener was registered.
             * @property timeUpdateListenerLoaded
             * @type {Boolean}
             * @default false
             */
            timeUpdateListenerLoaded: false,
            /** 
             * Instance of audio service API.
             * @property audioPlayerService
             * @type {AudioService}
             * @default null
             */
            audioPlayerService: null,

            /** 
             * Selector of audio control buttons (play/pause, next, previous, shuffle, repeat).
             * @property ctrlButtonsSelector
             * @default null
             */
            ctrlButtonsSelector: null,
            /** 
             * Selector of audio time progress bar.
             * @property timeProgressBarSelelector
             * @default null
             */
            timeProgressBarSelelector: null,
            /** 
             * Selector of audio spectrum analyzer.
             * @property spectrumAnalyzerSelelector
             * @default null
             */
            spectrumAnalyzerSelelector: null,
            /** 
             * Selector of audio info panel.
             * @property infoPanelSelector
             * @default null
             */
            infoPanelSelector: null,
            /** 
             * Selector of audio volume control.
             * @property volumeControlSelector
             * @default null
             */
            volumeControlSelector: null,

            /** 
             * Indicates if repeat option of audio player is turned on.
             * @property repeatOn
             * @type {Boolean}
             * @default false
             */
            repeatOn: false,
            /** 
             * Indicates if shuffle option of audio player is turned on.
             * @property shuffleOn
             * @type {Boolean}
             * @default false
             */
            shuffleOn: false,
            /** 
             * Indicates if audio is playing (is not paused).
             * @property playOn
             * @type {Boolean}
             * @default false
             */
            playOn: false,
            /** 
             * Indicates the index of paused/playing song.
             * @property index
             * @type {Number}
             * @default 1
             */
            index: 1,
            /** 
             * Indicates the position/current time in percentage (0% - 100%) of paused/playing song.
             * @property position
             * @type {Number}
             * @default 0
             */
            position: 0,
            /** 
             * Indicates the volume in percentage (0% - 100%) of the audio player.
             * @property volume
             * @type {Number}
             * @default 0
             */
            volume: 0,

            /**
             * Sets the audio spectrum analyzer selector.
             * 
             * @method setSpectrumAnalyzerSelector
             * @param selector {String} Audio spectrum analyzer selector.
             */
            setSpectrumAnalyzerSelector: function (selector) {
                AudioPlayer.spectrumAnalyzerSelelector = selector;
            },
            /**
             * Sets the audio control buttons selector.
             * 
             * @method setControlButtonsSelector
             * @param selector {String} Audio control buttons selector.
             */
            setControlButtonsSelector: function (selector) {
                AudioPlayer.ctrlButtonsSelector = selector;
            },
            /**
             * Sets the audio time progress bar selector.
             * 
             * @method setTimeProgressBarSelector
             * @param selector {String} Audio time progress bar selector.
             */
            setTimeProgressBarSelector: function (selector) {
                AudioPlayer.timeProgressBarSelelector = selector;
            },
            /**
             * Sets the audio info panel selector.
             * 
             * @method setInfoPanelSelector
             * @param selector {String} Audio info panel selector.
             */
            setInfoPanelSelector: function (selector) {
                AudioPlayer.infoPanelSelector = selector;
            },
            /**
             * Sets the audio volume control selector.
             * 
             * @method setVolumeControlSelector
             * @param selector {String} Audio volume control selector.
             */
            setVolumeControlSelector: function (selector) {
                AudioPlayer.volumeControlSelector = selector;
            },

            /**
             * Initializes the audio player user interface, binds the audio controls (control buttons, volume control, time progress bar, ...), adds audio events listeners,
             * gets the status from audio service API, loads appropriate song from passed model/playlist and updates the UI. 
             * 
             * @method init
             * @param modelLib {Array} Array of audio songs.
             */
            init: function (modelLib) {
                AudioPlayer.thisObj = this;
                AudioPlayer.audio = this.get(0);
                AudioPlayer.model = modelLib;

                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    $(AudioPlayer.ctrlButtonsSelector).buttonControls('initAudioPlayerButtons');
                    $(AudioPlayer.ctrlButtonsSelector).unbind();
                    $(AudioPlayer.ctrlButtonsSelector).bind('previousSong', function (e) {
                        console.log("previousSong clicked");
                        AudioPlayer.previous();
                    });
                    $(AudioPlayer.ctrlButtonsSelector).bind('nextSong', function (e) {
                        console.log("nextSong clicked");
                        AudioPlayer.next();
                    });
                    $(AudioPlayer.ctrlButtonsSelector).bind('playSong', function (e) {
                        console.log("playSong clicked");
                        AudioPlayer.playOn = !AudioPlayer.playOn;
                        AudioPlayer.playPauseButtons(AudioPlayer.playOn);
                        AudioPlayer.playPause(AudioPlayer.playOn);
                        AudioPlayer.spectrumAnalyzer(AudioPlayer.playOn);
                        AudioPlayer.setStatusAll();
                    });
                    $(AudioPlayer.ctrlButtonsSelector).bind('shuffleSong', function (e) {
                        console.log("shuffleSong clicked");
                        AudioPlayer.shuffleOn = !AudioPlayer.shuffleOn;
                        AudioPlayer.shuffleButton(AudioPlayer.shuffleOn);
                        AudioPlayer.nextButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                        AudioPlayer.previousButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                        AudioPlayer.setStatusAll();
                    });
                    $(AudioPlayer.ctrlButtonsSelector).bind('repeatSong', function (e) {
                        console.log("repeatSong clicked");
                        AudioPlayer.repeatOn = !AudioPlayer.repeatOn;
                        AudioPlayer.repeatButton(AudioPlayer.repeatOn);
                        AudioPlayer.nextButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                        AudioPlayer.previousButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                        AudioPlayer.setStatusAll();
                    });
                }

                if (AudioPlayer.volumeControlSelector !== null) {
                    $(AudioPlayer.volumeControlSelector).progressBarPlugin('init', 'volumeControl');
                    $(AudioPlayer.volumeControlSelector).bind('volumeControlTouch', function (e, data) {
                        console.log("volumeControlTouch " + data.position);
                        AudioPlayer.volume = data.position;
                        AudioPlayer.setAudioVolume(AudioPlayer.volume);
                        AudioPlayer.setStatusAll();
                    });
                }

                if (AudioPlayer.timeProgressBarSelelector !== null) {
                    $(AudioPlayer.timeProgressBarSelelector).timeProgressBar("init");
                    $(AudioPlayer.timeProgressBarSelelector).bind('positionChanged', function (e, data) {
                        console.log("positionChanged " + data.position);
                        AudioPlayer.position = data.position;
                        AudioPlayer.setAudioPosition(AudioPlayer.position);
                        AudioPlayer.setStatusAll();
                    });
                }

                AudioPlayer.audio.addEventListener('canplaythrough', function () {
                    AudioPlayer.thisObj.trigger('audioIndexUpdate', {
                        audioIndex: AudioPlayer.index
                    });

                    AudioPlayer.updateUIControls();

                    if (!AudioPlayer.timeUpdateListenerLoaded) {
                        AudioPlayer.timeUpdateListenerLoaded = true;
                        AudioPlayer.setAudioPosition(AudioPlayer.position);

                        AudioPlayer.audio.addEventListener('timeupdate', function () {
                            if (!isNaN(AudioPlayer.audio.currentTime) && !isNaN(AudioPlayer.audio.duration) && AudioPlayer.audio.currentTime != undefined && AudioPlayer.audio.duration != undefined) {
                                if (AudioPlayer.audio.currentTime <= AudioPlayer.audio.duration) {
                                    AudioPlayer.position = (AudioPlayer.audio.currentTime / AudioPlayer.audio.duration) * 100;
                                    AudioPlayer.updateProgressInfoPanel(AudioPlayer.index, AudioPlayer.model.length, AudioPlayer.audio.currentTime, AudioPlayer.audio.duration, AudioPlayer.position);
                                    AudioPlayer.spectrumAnalyzer(AudioPlayer.playOn);
                                    AudioPlayer.setStatusAll();
                                }
                            }
                        }, false);
                    }

                    AudioPlayer.playPause(AudioPlayer.playOn);
                }, false);

                AudioPlayer.audio.addEventListener('ended', function () {
                    AudioPlayer.next();
                });

                AudioPlayer.audioPlayerService = new AudioService();
                AudioPlayer.audioPlayerService.getStatus(function (jsonString) {
                    var statusObj;
                    if ((typeof jsonString).toLowerCase() === "string") {
                        try {
                            statusObj = JSON.parse(jsonString);
                        } catch (error) {
                            console.log("Unable to parse status: " + error.message);
                        }
                    } else {
                        statusObj = jsonString;
                    }

                    AudioPlayer.repeatOn = statusObj.repeat;
                    AudioPlayer.shuffleOn = statusObj.shuffle;
                    AudioPlayer.playOn = statusObj.play;
                    AudioPlayer.index = statusObj.indexInPlayList;
                    AudioPlayer.position = statusObj.position;
                    AudioPlayer.volume = statusObj.volume;

                    AudioPlayer.loadAudio(AudioPlayer.index);
                });
            },
            /**
             * Updates the audio UI controls and panels according to loaded song and audio status.
             * 
             * @method updateUIControls
             */
            updateUIControls: function () {
                AudioPlayer.playPauseButtons(AudioPlayer.playOn);
                AudioPlayer.shuffleButton(AudioPlayer.shuffleOn);
                AudioPlayer.repeatButton(AudioPlayer.repeatOn);
                AudioPlayer.nextButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                AudioPlayer.previousButton(AudioPlayer.index, AudioPlayer.repeatOn, AudioPlayer.shuffleOn);
                AudioPlayer.spectrumAnalyzer(AudioPlayer.playOn);
                AudioPlayer.volumeControl(AudioPlayer.volume);
                AudioPlayer.updateAudioInfoPanel(AudioPlayer.index);
                AudioPlayer.updateProgressInfoPanel(AudioPlayer.index, AudioPlayer.model.length, AudioPlayer.audio.currentTime, AudioPlayer.audio.duration, AudioPlayer.position);
            },
            /**
             * Sets the audio play/pause button to active/inactive state.
             * 
             * @method playPauseButtons
             * @param isPaused {Boolean} State of play/pause button.
             */
            playPauseButtons: function (isPaused) {
                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    if (isPaused) {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonPauseActive');
                    } else {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonPlayActive');
                    }
                }
            },
            /**
             * Sets the audio shuffle button to active/inactive state.
             * 
             * @method shuffleButton
             * @param isActive {Boolean} State of shuffle button.
             */
            shuffleButton: function (isActive) {
                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    if (isActive) {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonShuffleActive');
                    } else {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonShuffleInactive');
                    }
                }
            },
            /**
             * Sets the audio repeat button to active/inactive state.
             * 
             * @method repeatButton
             * @param isActive {Boolean} State of repeat button.
             */
            repeatButton: function (isActive) {
                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    if (isActive) {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonRepeatActive');
                    } else {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonRepeatInactive');
                    }
                }
            },
            /**
             * Sets the audio next button to active/inactive state.
             * 
             * @method nextButton
             * @param index {Number} Index of the song.
             * @param repeat {Boolean} State of the repeat option.
             * @param shuffle {Boolean} State of the shuffle option.
             */
            nextButton: function (index, repeat, shuffle) {
                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    if (repeat || shuffle || index < AudioPlayer.model.length) {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonNextActive');
                    } else {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonNextInactive');
                    }
                }
            },
            /**
             * Sets the audio previous button to active/inactive state.
             * 
             * @method previousButton
             * @param index {Number} Index of the song.
             * @param repeat {Boolean} State of the repeat option.
             * @param shuffle {Boolean} State of the shuffle option.
             */
            previousButton: function (index, repeat, shuffle) {
                if (AudioPlayer.ctrlButtonsSelector !== null) {
                    if (repeat || shuffle || index > 1) {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonPreviousActive');
                    } else {
                        $(AudioPlayer.ctrlButtonsSelector).buttonControls('buttonPreviousInactive');
                    }
                }
            },
            /**
             * Sets the audio spectrum analyzer to active/inactive state.
             * 
             * @method spectrumAnalyzer
             * @param playOn {Boolean} State of the audio playback.
             */
            spectrumAnalyzer: function (playOn) {
                if (AudioPlayer.spectrumAnalyzerSelelector !== null) {
                    if (playOn) {
                        $(AudioPlayer.spectrumAnalyzerSelelector).spectrumAnalyzer('spectrumAnalyzerRandomize');
                    } else {
                        $(AudioPlayer.spectrumAnalyzerSelelector).spectrumAnalyzer('clearSpectrumAnalyzer');
                    }
                }
            },
            /**
             * Sets the audio volume control.
             * 
             * @method volumeControl
             * @param volume {Number} Volume of the audio in percentage (0% - 100%).
             */
            volumeControl: function (volume) {
                if (volume > 100) {
                    volume = 100;
                } else if (volume < 0) {
                    volume = 0;
                }
                AudioPlayer.volume = volume;
                if (AudioPlayer.volumeControlSelector !== null) {
                    $(AudioPlayer.volumeControlSelector).progressBarPlugin('setVolume', volume);
                }
                AudioPlayer.setAudioVolume(volume);
            },
            /**
             * Sets the audio volume.
             * 
             * @method setAudioVolume
             * @param volume {Number} Volume of the audio in percentage (0% - 100%).
             */
            setAudioVolume: function (volume) {
                if (volume > 100) {
                    volume = 100;
                } else if (volume < 0) {
                    volume = 0;
                }
                AudioPlayer.volume = volume;
                AudioPlayer.audio.volume =  volume / 100;
            },
            /**
             * Updates the audio info panel (artist, album, name).
             * 
             * @method updateAudioInfoPanel
             * @param index {Number} Index of the song.
             */
            updateAudioInfoPanel: function (index) {
                if (AudioPlayer.infoPanelSelector !== null) {
                    var objInfo = {};
                    objInfo.title = 'NOW PLAYING';
                    objInfo.artist = AudioPlayer.model[index - 1].artist;
                    objInfo.album = AudioPlayer.model[index - 1].album;
                    objInfo.name = AudioPlayer.model[index - 1].name;
                    $(AudioPlayer.infoPanelSelector).infoPanel('show', objInfo);
                }
            },
            /**
             * Updates the audio time progress bar.
             * 
             * @method updateAudioInfoPanel
             * @param index {Number} Index of the song.
             * @param length {Number} Number of songs in model.
             * @param currentTime {Number} Current time of song playback.
             * @param durationTime {Number} Duration of the song.
             * @param position {Number} Position/current time in percentage of song playback.
             */
            updateProgressInfoPanel: function (index, length, currentTime, durationTime, position) {
                if (AudioPlayer.timeProgressBarSelelector !== null) {
                    var _currentTime = (currentTime == undefined || isNaN(currentTime)) ? 0 : currentTime;
                    var _durationTime = (durationTime == undefined  || isNaN(durationTime)) ? 0 : durationTime;

                    if (_currentTime > _durationTime) {
                        _currentTime = _durationTime;
                    }

                    var remainingTime = _durationTime - _currentTime, durationMins = 0, durationSecs = 0;

                    durationMins = Math.floor(remainingTime / 60, 10);
                    durationSecs = Math.round(remainingTime) - durationMins * 60;
                    estimationTime = '-' + durationMins + ':' + (durationSecs > 9 ? durationSecs : '0' + durationSecs);

                    var initProgressBarObj = {
                            count: length,
                            index: index,
                            estimation: estimationTime,
                            position: position
                        };
                    $(AudioPlayer.timeProgressBarSelelector).timeProgressBar("show", initProgressBarObj);
                }
            },
            /**
             * Sets and loads the audio source.
             * 
             * @method loadAudio
             * @param index {Number} Index of the song.
             */
            loadAudio: function (index) {
                AudioPlayer.audio.pause();
                AudioPlayer.audio.src = "";
                AudioPlayer.audio.src = AudioPlayer.model[index - 1].path;
                AudioPlayer.audio.load();
            },
            /**
             * Sets the position/current time of loaded song.
             * 
             * @method setAudioPosition
             * @param position {Number} Position in percentage of song.
             */
            setAudioPosition: function (position) {
                if (position > 100) {
                    position = 100;
                } else if (position < 0) {
                    position = 0;
                }
                AudioPlayer.position = position;
                AudioPlayer.audio.currentTime = position / 100 * AudioPlayer.audio.duration;
            },
            /**
             * Starts/pauses playback of the song.
             * 
             * @method playPause
             * @param playing {Boolean} State of song playback.
             */
            playPause: function (playing) {
                if (playing) {
                    AudioPlayer.audio.play();
                } else {
                    AudioPlayer.audio.pause();
                }
            },
            /**
             * Sets next, random (if shuffle is on) index of song or first index (if repeat is on) and loads it from model.
             * 
             * @method next
             */
            next: function () {
                var songIndex = AudioPlayer.index, i = 0;

                if (AudioPlayer.shuffleOn) {
                    while (songIndex == AudioPlayer.index) {
                        songIndex = Math.floor((Math.random() * AudioPlayer.model.length) + 1);
                    }
                    AudioPlayer.index = songIndex;
                } else if (AudioPlayer.repeatOn && AudioPlayer.index >= AudioPlayer.model.length) {
                    AudioPlayer.index = 1;
                } else if (AudioPlayer.index < AudioPlayer.model.length) {
                    AudioPlayer.index = AudioPlayer.index + 1;
                } else {
                    AudioPlayer.playOn = false;
                }

                AudioPlayer.position = 0;
                AudioPlayer.loadAudio(AudioPlayer.index);
                AudioPlayer.setStatusAll();
            },
            /**
             * Sets previous, random (if shuffle is on) index of song or last index (if repeat is on) and loads it from model.
             * 
             * @method previous
             */
            previous: function () {
                var songIndex = AudioPlayer.index, i = 0;

                if (AudioPlayer.shuffleOn) {
                    while (songIndex == AudioPlayer.index) {
                        songIndex = Math.floor((Math.random() * AudioPlayer.model.length) + 1);
                    }
                    AudioPlayer.index = songIndex;
                } else if (AudioPlayer.repeatOn && AudioPlayer.index <= 1) {
                    AudioPlayer.index = AudioPlayer.model.length;
                } else if (AudioPlayer.index > 1) {
                    AudioPlayer.index = AudioPlayer.index - 1;
                }

                AudioPlayer.position = 0;
                AudioPlayer.loadAudio(AudioPlayer.index);
                AudioPlayer.setStatusAll();
            },
            /**
             * Posts the current status of playback to server via audio service API.
             * 
             * @method setStatusAll
             */
            setStatusAll: function () {
                var new_status = {
                        repeat: AudioPlayer.repeatOn,
                        shuffle: AudioPlayer.shuffleOn,
                        play: AudioPlayer.playOn,
                        indexInPlayList: AudioPlayer.index,
                        position: AudioPlayer.position,
                        volume: AudioPlayer.volume
                    };
                AudioPlayer.audioPlayerService.setStatusAll(JSON.stringify(new_status), function (aData) {
                    console.log("status set successfully");
                });
            }
        };

    /** 
     * jQuery extension method `com.intel.tizen.coulomb.2012.AudioAPI`
     * @param method {Object|jQuery selector} Identificator (name) of method or jQuery selector.
     * @method audioAPI
     * @for jQuery
     * @return Result of called method.
     */
    $.fn.audioAPI = function (method) {
        // Method calling logic
        if (AudioPlayer[method]) {
            return AudioPlayer[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return AudioPlayer.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.audioAPI');
        }
    };
}(jQuery));