/**
 * @namespace com.intel.tizen.coulomb.2012
 **/

var GRID_TAB = 0, LIST_TAB = 1, SEARCH_TAB = 2;
var basePath = window.location.protocol + "//" + window.location.host + "/css/car/components/library/templates/";
var SUB_PANEL_DELEGATE_DEFAULT = basePath + "subpanelDelegate.html",
	TOP_PANEL_DELEGATE_DEFAULT = basePath + "tabMenuItemDelegate.html";

(function ($) {
	/**
	 * Represents data UI control element that is used to display list/grid/search view of data elements in multiple logical sections, so called tabs.
	 * Rendering of individual parts of this element is done by template mechanism.
	 * @class Library
	 * @static
	 */
	var Library = {
			thisObj: null,
			/** 
			 * Main content template.
			 * @property contentDelegate
			 * @type {String}
			 */
			contentDelegate: null,
			/** 
			 * Tabs content template.
			 * @property menuItemDelegate
			 * @type {String}
			 */
			menuItemDelegate: TOP_PANEL_DELEGATE_DEFAULT,
			/** 
			 * Sub panel content template.
			 * @property subpanelDelegate
			 * @type {String}
			 */
			subpanelDelegate: SUB_PANEL_DELEGATE_DEFAULT,
			/** 
			 * Library title.
			 * @property sectionTitle
			 * @type {String}
			 */
			sectionTitle: "",
			/** 
			 * Indicates if list, grid or search view is selected.
			 * @property selectedLeftTabIndex
			 * @type {Number}
			 */
			selectedLeftTabIndex: LIST_TAB,
			/** 
			 * Index of selected tab.
			 * @property selectedTopTabIndex
			 * @type {Number}
			 */
			selectedTopTabIndex: -1,
			/** 
			 * Indicates if alphabet component should be visible when sub panel is opened.
			 * @property alphabetVisible
			 * @type {Boolean}
			 */
			alphabetVisible: false,
			/**
			 * Initializes library layout and alphabet component. 
			 * 
			 * @method init
			 */
			init: function () {
				this.empty();
				var str = "<div class='libraryLeftPanel'>";
				str += "<div class='libraryLeftControl'>";
				str += "<div id='grid' class='gridIcon " + (Library.selectedLeftTabIndex == GRID_TAB ?  "gridIconActive" : "") + "' onclick=\"$(\'#" + this.attr('id') + "\').library(\'clickOnGridViewBtn\')\"></div>";
				str += "<div id='list' class='listIcon " + (Library.selectedLeftTabIndex == LIST_TAB ?  "listIconActive" : "") + "' onclick=\"$(\'#" + this.attr('id') + "\').library(\'clickOnListViewBtn\')\"></div>";
				str += "<div id='search' class='searchIcon" + (Library.selectedLeftTabIndex == SEARCH_TAB ?  "serachIconActive" : "") + "' onclick=\"$(\'#" + this.attr('id') + "\').library(\'clickOnSearchViewBtn\')\"></div>";
				str += "</div>";
				str += "</div>";
				str += "<div id='libraryTopPanel' class='libraryTopPanel'>";
				str += "<div class='libraryTopPanelTitle'></div>";
				str += "<div class='closeLibraryButton' onClick=\'$(\"#" + this.attr('id') + "\").library(\"hidePage\")\'></div>";
				str += "<div id='libraryTabsID' class='libraryTabs'></div>";
				str += "</div>";
				str += "<div id='alphabetBookmarkList'></div>";
				str += "<div id='libraryTopSubPanel' class='libraryTopSubPanel bgColorDark'></div>";
				str += "<div id='libraryContent' class='libraryContent'>";
				str += "</div>";
				this.append(str);
				$(".libraryTopPanelTitle").boxCaptionPlugin('initSmall', Library.sectionTitle);
				AlphabetBookmark.fill();
				$("#libraryContent").show();
				$("#libraryTopSubPanel").hide();
				Library.thisObj = this;
			},
			/**
			 * Shows library on the screen. Move in from right to left animation applied.
			 * 
			 * @method showPage
			 */
			showPage: function () {
				Library.thisObj.css('left', '0px');
			},
			/**
			 * Hides library from the screen. Move out from left to right animation applied.
			 * 
			 * @method hidePage
			 */
			hidePage: function () {
				Library.thisObj.css('left', '720px');
			},
			/**
			 * Sets library title.
			 * 
			 * @method setSectionTitle
			 */
			setSectionTitle: function (title) {
				Library.sectionTitle = title;
			},
			/**
			 * Sets library main content template.
			 * 
			 * @method setContentDelegate
			 * @param delegate {String} Path to template.
			 */
			setContentDelegate : function (delegate) {
				Library.contentDelegate = delegate;
			},
			/**
			 * Renders the given main content model into the main content DOM element utilizing template mechanism.
			 * 
			 * @method contentTemplateCompile
			 * @param model {Array} Array of data elements.
			 * @param classes {String} Css classes to be added to main content DOM element.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			contentTemplateCompile : function (model, classes, successCallback) {
				Library.clearContent();
				Library.changeContentClass(classes);
				template.compile(model, Library.contentDelegate, "#libraryContent", successCallback);
			},
			/**
			 * Adds classes to the main content DOM element.
			 * 
			 * @method changeContentClass
			 * @param classes {String} One or more class names to be added to the class attribute of main content DOM element.
			 */
			changeContentClass: function (classes) {
				$("#libraryContent").removeClass();
				$("#libraryContent").addClass("libraryContent " + classes);
			},
			/**
			 * Removes all child nodes of the main content DOM element.
			 * 
			 * @method clearContent
			 */
			clearContent: function () {
				$("#libraryContent").empty();
			},
			/**
			 * Sets library tabs content template.
			 * 
			 * @method setMenuItemDelegate
			 * @param delegate {String} Path to template.
			 */
			setMenuItemDelegate : function (delegate) {
				Library.menuItemDelegate = delegate;
			},
			/**
			 * Renders the given tabs into the tabs DOM element utilizing template mechanism.
			 * 
			 * @method tabMenuTemplateCompile
			 * @param model {Array} Array of tabs.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			tabMenuTemplateCompile : function (model, successCallback) {
				var i = 0;
				for (i = 0; i < model.Tabs.length; i++) {
					model.Tabs[i].index = i;
					if (model.Tabs[i].selected) {
						Library.selectedTopTabIndex = model.Tabs[i].index;
					}
					if (model.Tabs[i].action) {
						model.Tabs[i].action = model.Tabs[i].action + "$(\'#" + this.attr('id') + "\').library(\'libraryTabClick\'," + i + ");";
					} else {
						model.Tabs[i].action = "$(\'#" + this.attr('id') + "\').library(\'libraryTabClick\'," + i + ");";
					}
				}
				if (Library.selectedTopTabIndex == -1) {
					Library.selectedTopTabIndex = 0;
				}
				template.compile(model, Library.menuItemDelegate, "#libraryTabsID", successCallback);
			},
			/**
			 * Returns index of selected tab.
			 * 
			 * @method getSelectetTopTabIndex
			 * @return {Number} Index of selected tab.
			 */
			getSelectetTopTabIndex: function () {
				return Library.selectedTopTabIndex;
			},
			/**
			 * Sets index and highlight selected tab.
			 * 
			 * @method setTopTabIndex
			 * @param index {Number} Index of tab.
			 */
			setTopTabIndex: function (index) {
				Library.selectedTopTabIndex = index;
				$(".libraryTab").removeClass("fontColorSelected libraryTabSelected");
				var tabId = "#libraryTab" + index;
				$(tabId).toggleClass("fontColorSelected libraryTabSelected");
				var selectedTabClass = "libraryTab" + index + "Selected";
				$("#libraryTopPanel").attr("class", "libraryTopPanel " + selectedTabClass);
			},
			/**
			 * Sets library sub panel content template.
			 * 
			 * @method setSubpanelContentDelegate
			 * @param delegate {String} Path to template.
			 */
			setSubpanelContentDelegate : function (delegate) {
				Library.subpanelDelegate = delegate;
			},
			/**
			 * Renders the given model into the sub panel DOM element utilizing template mechanism.
			 * 
			 * @method subpanelContentTemplateCompile
			 * @param model {Object} Data for sub panel.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			subpanelContentTemplateCompile : function (model, successCallback) {
				model.id = this.attr('id');
				if (model.action == null) {
					model.action = "$(\'#" + this.attr('id') + "\').library(\'closeSubpanel\')";
					model.actionName = "BACK";
				}
				template.compile(model, Library.subpanelDelegate, "#libraryTopSubPanel", successCallback);
			},
			/**
			 * Returns index of selected left tab.
			 * 
			 * @method getSelectetLeftTabIndex
			 * @return {Number} Index of selected tab.
			 */
			getSelectetLeftTabIndex: function () {
				return Library.selectedLeftTabIndex;
			},
			/**
			 * Sets index of selected left tab.
			 * 
			 * @method setLeftTabIndex
			 * @param index {Number} Index of left tab.
			 */
			setLeftTabIndex: function (index) {
				Library.selectedLeftTabIndex = index;
			},
			/**
			 * Selects grid view button as active and triggers event.
			 * 
			 * @method clickOnGridViewBtn
			 */
			clickOnGridViewBtn: function () {
				Library.selectedLeftTabIndex = GRID_TAB;
				$(".libraryLeftControl #list").removeClass("listIconActive");
				$(".libraryLeftControl #search").removeClass("searchIconActive");
				$(".libraryLeftControl #grid").addClass("gridIconActive");
				Library.thisObj.trigger('eventClick_GridViewBtn');
			},
			/**
			 * Selects list view button as active and triggers event.
			 * 
			 * @method clickOnListViewBtn
			 */
			clickOnListViewBtn: function () {
				Library.selectedLeftTabIndex = LIST_TAB;
				$(".libraryLeftControl #grid").removeClass("gridIconActive");
				$(".libraryLeftControl #search").removeClass("searchIconActive");
				$(".libraryLeftControl #list").addClass("listIconActive");
				Library.thisObj.trigger('eventClick_ListViewBtn');
			},
			/**
			 * Selects search view button as active and triggers event.
			 * 
			 * @method clickOnSearchViewBtn
			 */
			clickOnSearchViewBtn: function () {
				$(".libraryLeftControl #grid").removeClass("gridIconActive");
				$(".libraryLeftControl #list").removeClass("listIconActive");
				$(".libraryLeftControl #search").addClass("searchIconActive");
				Library.thisObj.trigger('eventClick_SearchViewBtn');
			},
			/**
			 * Shows sub panel and triggers event.
			 * 
			 * @method showSubpanel
			 */
			showSubpanel: function () {
				if ($("#libraryTopSubPanel").is(":hidden")) {
					$("#libraryTopSubPanel").show("normal");
					if (!Library.alphabetVisible) {
						Library.hideAlphabet();
					} else {
						$("#alphabetBookmarkList").css('top', '175px');
					}
					Library.thisObj.trigger('eventClick_showSubpanel');
				}
			},
			/**
			 * Hides sub panel and triggers event.
			 * 
			 * @method closeSubpanel
			 */
			closeSubpanel: function () {
				if ($("#libraryTopSubPanel").is(":visible")) {
					$("#libraryTopSubPanel").hide("normal");
					Library.showAlphabet();
					$("#alphabetBookmarkList").css('top', '115px');
					Library.thisObj.trigger('eventClick_closeSubpanel');
				}
			},
			/**
			 * Triggers event automatically after clicking on tab.
			 * 
			 * @method libraryTabClick
			 * @param index {Number} Index of tab.
			 */
			libraryTabClick: function (index) {
				Library.setTopTabIndex(index);
				Library.thisObj.trigger('eventClick_menuItemBtn', {Index: index});
			},
			/**
			 * Sets visibility of alphabet component.
			 * 
			 * @method setAlphabetVisible
			 * @param visible {Boolean} Visibility of alphabet.
			 */
			setAlphabetVisible: function (visible) {
				Library.alphabetVisible = visible;
			},
			/**
			 * Hides alphabet component.
			 * 
			 * @method hideAlphabet
			 */
			hideAlphabet: function () {
				$("#alphabetBookmarkList").hide();
				$("#libraryContent").css('margin-right', '15px');
			},
			/**
			 * Shows alphabet component.
			 * 
			 * @method showAlphabet
			 */
			showAlphabet: function () {
				$("#alphabetBookmarkList").show();
				$("#libraryContent").css('margin-right', '50px');
			}
		};
	/** 
	 * jQuery extension method for class `com.intel.tizen.coulomb.2012.Library`
	 * @param method {Object|jQuery selector} Identificator (name) of method or jQuery selector.
	 * @method library
	 * @for jQuery
	 * @return Result of called method.
	 */
	$.fn.library = function (method) {
		// Method calling logic
		if (Library[method]) {
			return Library[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return Library.init.apply(this, arguments);
		} else {
			$.error('Method ' + method + ' does not exist on jQuery.infoPanelAPI');
		}
	};
}(jQuery));
