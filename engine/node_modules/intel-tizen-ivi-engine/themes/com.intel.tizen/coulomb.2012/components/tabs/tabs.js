/**
 * @namespace com.intel.tizen.coulomb.2012
 **/

var SUB_PANEL_DELEGATE_DEFAULT = "../../css/car/components/tabs/templates/subPanelDelegate.html",
	TOP_PANEL_DELEGATE_DEFAULT = "../../css/car/components/tabs/templates/tabMenuItemDelegate.html";

(function ($) {
	/**
	 * Represents data UI control element that is used to display list/grid/search view of data elements in multiple logical sections, so called tabs.
	 * Rendering of individual parts of this element is done by template mechanism.
	 * @class Tabs
	 * @static
	 */
	var Tabs = {
			thisObj: null,
			/** 
			 * Main content template.
			 * @property contentDelegate
			 * @type {String}
			 */
			contentDelegate: null,
			/** 
			 * Tabs content template.
			 * @property topPanelDelegate
			 * @type {String}
			 */
			topPanelDelegate: TOP_PANEL_DELEGATE_DEFAULT,
			/** 
			 * Sub panel content template.
			 * @property subpanelDelegate
			 * @type {String}
			 */
			subPanelDelegate: SUB_PANEL_DELEGATE_DEFAULT,
			/** 
			 * Library title.
			 * @property sectionTitle
			 * @type {String}
			 */
			sectionTitle: null,
			/** 
			 * Index of selected tab.
			 * @property selectedTopTabIndex
			 * @type {Number}
			 */
			selectedTopTabIndex: -1,

			/**
			 * Initializes library layout and alphabet component. 
			 * 
			 * @method init
			 */
			init: function () {
				this.empty();
				var str = "<div id='tabsTopPanel' class='tabsTopPanel'>";
				str += "<div class='tabsTopPanelTitle'></div>";
				str += "<div class='tabsCloseButton' onClick=\'$(\"#" + this.attr('id') + "\").tabs(\"hidePage\")\'></div>";
				str += "<div id='tabsTabsID' class='tabsTabs'></div>";
				str += "</div>";
				str += "<div id='tabsTopSubPanel' class='tabsTopSubPanel bgColorDark'></div>";
				str += "<div id='tabsContent' class='tabsContent'></div>";
				this.append(str);

				$(".tabsTopPanelTitle").boxCaptionPlugin('initSmall', Tabs.sectionTitle);
				$("#tabsContent").show();
				$("#tabsTopSubPanel").hide();
				Tabs.thisObj = this;
			},
			/**
			 * Shows library on the screen. Move in from right to left animation applied.
			 * 
			 * @method showPage
			 */
			showPage: function () {
				Tabs.thisObj.fadeIn();
			},
			/**
			 * Hides library from the screen. Move out from left to right animation applied.
			 * 
			 * @method hidePage
			 */
			hidePage: function () {
				Tabs.thisObj.fadeOut();
			},
			/**
			 * Sets library title.
			 * 
			 * @method setSectionTitle
			 */
			setSectionTitle: function (title) {
				Tabs.sectionTitle = title;
			},
			/**
			 * Sets library main content template.
			 * 
			 * @method setContentDelegate
			 * @param delegate {String} Path to template.
			 */
			setContentDelegate: function (delegate) {
				Tabs.contentDelegate = delegate;
			},
			/**
			 * Renders the given main content model into the main content DOM element utilizing template mechanism.
			 * 
			 * @method contentTemplateCompile
			 * @param model {Array} Array of data elements.
			 * @param classes {String} Css classes to be added to main content DOM element.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			contentTemplateCompile: function (model, classes, successCallback) {
				Tabs.clearContent();
				Tabs.changeContentClass(classes);
				template.compile(model, Tabs.contentDelegate, "#tabsContent", successCallback);
			},
			/**
			 * Adds classes to the main content DOM element.
			 * 
			 * @method changeContentClass
			 * @param classes {String} One or more class names to be added to the class attribute of main content DOM element.
			 */
			changeContentClass: function (classes) {
				$("#tabsContent").removeClass();
				$("#tabsContent").addClass("tabsContent " + classes);
			},
			/**
			 * Removes all child nodes of the main content DOM element.
			 * 
			 * @method clearContent
			 */
			clearContent: function () {
				$("#tabsContent").empty();
			},
			/**
			 * Sets library tabs content template.
			 * 
			 * @method setMenuItemDelegate
			 * @param delegate {String} Path to template.
			 */
			setMenuItemDelegate: function (delegate) {
				Tabs.topPanelDelegate = delegate;
			},
			/**
			 * Renders the given tabs into the tabs DOM element utilizing template mechanism.
			 * 
			 * @method tabMenuTemplateCompile
			 * @param model {Array} Array of tabs.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			tabMenuTemplateCompile: function (model, successCallback) {
				var i = 0;
				for (i = 0; i < model.Tabs.length; i++) {
					model.Tabs[i].index = i;
					if (model.Tabs[i].selected) {
						Tabs.selectedTopTabIndex = model.Tabs[i].index;
					}
					if (model.Tabs[i].action) {
						model.Tabs[i].action = model.Tabs[i].action + "$(\'#" + this.attr('id') + "\').tabs(\'tabsTabClick\'," + i + ");";
					} else {
						model.Tabs[i].action = "$(\'#" + this.attr('id') + "\').tabs(\'tabsTabClick\'," + i + ");";
					}
				}

				if (Tabs.selectedTopTabIndex == -1) {
					Tabs.selectedTopTabIndex = 0;
				}

				template.compile(model, Tabs.topPanelDelegate, "#tabsTabsID", successCallback);
			},
			/**
			 * Returns index of selected tab.
			 * 
			 * @method getSelectetTopTabIndex
			 * @return {Number} Index of selected tab.
			 */
			getSelectetTopTabIndex: function () {
				return Tabs.selectedTopTabIndex;
			},
			/**
			 * Sets index and highlight selected tab.
			 * 
			 * @method setTopTabIndex
			 * @param index {Number} Index of tab.
			 */
			setTopTabIndex: function (index) {
				Tabs.selectedTopTabIndex = index;
				$(".tabsTab").removeClass("fontColorSelected tabsTabSelected");
				var tabId = "#tabsTab" + index;
				$(tabId).toggleClass("fontColorSelected tabsTabSelected");
				var selectedTabClass = "tabsTab" + index + "Selected";
				$("#tabsTopPanel").attr("class", "tabsTopPanel " + selectedTabClass);
			},
			/**
			 * Sets library sub panel content template.
			 * 
			 * @method setSubpanelContentDelegate
			 * @param delegate {String} Path to template.
			 */
			setSubpanelContentDelegate : function (delegate) {
				Tabs.subPanelDelegate = delegate;
			},
			/**
			 * Renders the given model into the sub panel DOM element utilizing template mechanism.
			 * 
			 * @method subpanelContentTemplateCompile
			 * @param model {Object} Data for sub panel.
			 * @param successCallback {Function} Function called when the rendering ends successfully.
			 */
			subpanelContentTemplateCompile : function (model, successCallback) {
				model.id = this.attr('id');
				if (model.action == null) {
					model.action = "$(\'#" + this.attr('id') + "\').tabs(\'closeSubpanel\')";
					model.actionName = "BACK";
				}

				template.compile(model, Tabs.subPanelDelegate, "#tabsTopSubPanel", successCallback);
			},

			/**
			 * Shows sub panel and triggers event.
			 * 
			 * @method showSubpanel
			 */
			showSubpanel: function (id) {
				if ($("#tabsTopSubPanel").is(":hidden")) {
					$("#tabsTopSubPanel").show("normal");
					Tabs.thisObj.trigger('eventClick_showSubpanel');
				}
			},
			/**
			 * Hides sub panel and triggers event.
			 * 
			 * @method closeSubpanel
			 */
			closeSubpanel: function () {
				if ($("#tabsTopSubPanel").is(":visible")) {
					$("#tabsTopSubPanel").hide("normal");
					Tabs.thisObj.trigger('eventClick_closeSubpanel');
				}
			},
			/**
			 * Triggers event automatically after clicking on tab.
			 * 
			 * @method tabsTabClick
			 * @param index {Number} Index of tab.
			 */
			tabsTabClick: function (index) {
				Tabs.setTopTabIndex(index);
				Tabs.thisObj.trigger('eventClick_menuItemBtn', { Index: index });
			}
		};
	/** 
	 * jQuery extension method for class `com.intel.tizen.coulomb.2012.Tabs`
	 * @param method {Object|jQuery selector} Identificator (name) of method or jQuery selector.
	 * @method tabs
	 * @for jQuery
	 * @return Result of called method.
	 */
	$.fn.tabs = function (method) {
		// Method calling logic
		if (Tabs[method]) {
			return Tabs[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return Tabs.init.apply(this, arguments);
		} else {
			$.error('Method ' +  method + ' does not exist on jQuery.infoPanelAPI');
		}
	};
}(jQuery));