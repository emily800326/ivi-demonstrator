/**
 * @namespace com.intel.tizen.coulomb.2012
 **/

var SETTINGS_BASEPATH = "../../css/car/components/settings/";

/**
 * Represents Settings view utilizing tabs component.
 * @class Settings
 * @constructor
 */
var Settings = {
		/** 
		 * Indicates if the main settings view was already initialized.
		 * @property initialized
		 * @type {Boolean}
		 * @default false
		 */
		initialized: false,

		/** 
		 * Array of predefined settings that will be rendered on settings main view.
		 * @property settingsModel
		 * @type {Array}
		 */
		settingsModel: [{
			"name": "Time and Date",
			"path": "templates/timeanddate.html"
		}, {
			"name": "Navigation",
			"path": "templates/navigation.html"
		}, {
			"name": "Theme",
			"path": "templates/themes.html"
		}, {
			"name": "Connections",
			"path": "templates/connections.html"
		}, {
			"name": "Accounts",
			"path": "templates/accounts.html"
		}],

		/**
		 * Loads all the javascript and style files that it depends on, initializes the tab component, calls render settings view function and shows the settings main view on the screen.
		 * 
		 * @method init
		 */
		init: function () {
			loadScript('../../css/car/components/boxCaption/boxCaption.js', function (path, status) {
				if (status == "ok") {
					loadScript('../../css/car/components/tabs/tabs.js', function (path, status) {
						if (status == "ok") {
							$("head").append($("<link rel='stylesheet' href='../../css/car/components/boxCaption/boxCaption.css' />"));
							$("head").append($("<link rel='stylesheet' href='../../css/car/components/tabs/tabs.css' />"));
							$("head").append($("<link rel='stylesheet' href='" + SETTINGS_BASEPATH + "/css/settings.css' />"));

							if (!$("#settingsTabs").length) {
								var settings = '<div id="settingsTabs" class="tabs pageBgColorNormalTransparent"></div>';
								$(settings).appendTo("body");
							}

							$('#settingsTabs').bind('eventClick_menuItemBtn', function (e, data) {
								$('#settingsTabs').tabs('closeSubpanel');
								Settings.renderSettingsView();
							});

							$('#settingsTabs').bind('eventClick_closeSubpanel', function () {
								Settings.renderSettingsView();
							});

							$('#settingsTabs').tabs("setSectionTitle", "APPS");
							$('#settingsTabs').tabs("init");

							var tabMenuModel = {
									Tabs: [{
										text: "SETTINGS",
										selected: true
									}]
								};

							$('#settingsTabs').tabs("tabMenuTemplateCompile", tabMenuModel, function () {
								Settings.renderSettingsView(function () {
									Settings.initialized = true;
									Settings.show();
								});
							});
						}
					});
				}
			});
		},
		/**
		 * Shows the settings main view on the screen, if it was already initialized.
		 * 
		 * @method show
		 */
		show: function () {
			if (Settings.initialized) {
				$('#settingsTabs').tabs("showPage");
			}
		},
		/**
		 * Renders the array of predefined settings into the HTML DOM utilizing template mechanism.
		 * 
		 * @method renderSettingsView
		 * @param successCallback {Function} Function called when the rendering ends successfully.
		 */
		renderSettingsView: function (successCallback) {
			$('#settingsTabs').tabs("setContentDelegate", SETTINGS_BASEPATH + "templates/settingsListDelegate.html");
			$('#settingsTabs').tabs("contentTemplateCompile", Settings.settingsModel, "settingsContent", successCallback);
		},
		/**
		 * Intitialzes and renders tabs sub panel into the HTML DOM utilizing template mechanism and calls appropriate render function.
		 * 
		 * @method openSetting
		 * @param index {Number} Index of setting from settingsModel array.
		 */
		openSetting: function (index) {
			index = parseInt(index, 10);
			var subpanelModel =	{
					textTitle: "SETTINGS",
					textSubtitle: Settings.settingsModel[index].name
				};
			$('#settingsTabs').tabs("subpanelContentTemplateCompile", subpanelModel, function () {
				$("#tabsTopSubPanelTitle").boxCaptionPlugin('initSmall', subpanelModel.textTitle);
				$('#settingsTabs').tabs('showSubpanel');

				switch (index) {
				case 2:
					$('#settingsTabs').tabs("setContentDelegate", SETTINGS_BASEPATH + Settings.settingsModel[index].path);
					if (Themes.userThemeList.length) {
						Themes.renderThemesView();
					} else {
						Themes.init();
					}
					break;

				default:
					$('#settingsTabs').tabs("contentTemplateCompile", [], "", function () {});
					break;
				}
			});
		}
	};

/**
 * Represents Themes setting view.
 * @class Themes
 * @constructor
 */
var Themes = {
		/** 
		 * Array of available user themes.
		 * @property userThemeList
		 * @type {Array}
		 * @default []
		 */
		userThemeList: [],
		/** 
		 * Instance of theme engine service API.
		 * @property themeEngine
		 * @type {ThemeEngine}
		 * @default null
		 */
		themeEngine: null,

		/**
		 * Gets available user themes via theme engine service API and calls render themes view function.
		 * 
		 * @method init
		 */
		init: function () {
			if (typeof ThemeEngine != 'undefined') {
				Themes.themeEngine = new ThemeEngine();
				Themes.themeEngine.getUserThemes(function (jsonString) {
					Themes.userThemeList = jQuery.extend(true, [], jsonString);
					Themes.renderThemesView();
				});
			} else {
				console.error("ThemeEngine API is not available, please start IVI server.");
			}
		},
		/**
		 * Sets selected user theme.
		 * 
		 * @method setTheme
		 * @param id {String} Id of user theme.
		 */
		setTheme: function (id) {
			if (Themes.themeEngine) {
				Themes.themeEngine.setUserTheme(id, function () {
					//window.location.reload();
				});
			}
		},
		/**
		 * Renders the array of available user themes into the HTML DOM utilizing template mechanism.
		 * 
		 * @method openSetting
		 * @param index {Number} Index of setting from settingsModel array.
		 */
		renderThemesView: function () {
			$('#settingsTabs').tabs("contentTemplateCompile", Themes.userThemeList, "themesContent", function () {
			});
		}
	};